{
  "version": 3,
  "file": "ui-router-rx.js",
  "sources": [
    "@uirouter/rx/ui-router-rx.ts"
  ],
  "sourcesContent": [
    "/** @module rx */\n/** */\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { map, mergeMap, filter } from 'rxjs/operators';\nimport { Transition, UIRouter, StateDeclaration, UIRouterPlugin } from '@uirouter/core';\n\nexport interface StatesChangedEvent {\n  currentStates: StateDeclaration[];\n  registered: StateDeclaration[];\n  deregistered: StateDeclaration[];\n}\n\ndeclare module '@uirouter/core/lib/globals' {\n  interface UIRouterGlobals {\n    states$?: Observable<StatesChangedEvent>;\n    start$?: Observable<Transition>;\n    success$?: Observable<Transition>;\n    params$?: Observable<{ [paramName: string]: any }>;\n  }\n}\n\n/** Augments UIRouterGlobals with observables for transition starts, successful transitions, and state parameters */\nexport class UIRouterRx implements UIRouterPlugin {\n  name = '@uirouter/rx';\n  private deregisterFns: Function[] = [];\n\n  constructor(router: UIRouter) {\n    let start$ = new ReplaySubject<Transition>(1);\n    let success$ = start$.pipe(mergeMap(t => t.promise.then(() => t, () => null)), filter(t => !!t));\n    let params$ = success$.pipe(map((transition: Transition) => transition.params()));\n\n    let states$ = new ReplaySubject<StatesChangedEvent>(1);\n\n    function onStatesChangedEvent(event: string, states: StateDeclaration[]) {\n      let changeEvent = {\n        currentStates: router.stateRegistry.get(),\n        registered: [],\n        deregistered: [],\n      };\n\n      if (event) changeEvent[event] = states;\n      states$.next(changeEvent);\n    }\n\n    this.deregisterFns.push(router.transitionService.onStart({}, transition => start$.next(transition)));\n    this.deregisterFns.push(router.stateRegistry.onStatesChanged(onStatesChangedEvent));\n    onStatesChangedEvent(null, null);\n    Object.assign(router.globals, { start$, success$, params$, states$ });\n  }\n\n  dispose() {\n    this.deregisterFns.forEach(deregisterFn => deregisterFn());\n    this.deregisterFns = [];\n  }\n}\n\nexport const UIRouterRxPlugin = UIRouterRx;\n"
  ],
  "names": [
    "ReplaySubject",
    "mergeMap",
    "filter",
    "map"
  ],
  "mappings": ";;;;;;;;;;;;IAAA;AACA,IAoBA;AACA;QAIE,oBAAY,MAAgB;YAH5B,SAAI,GAAG,cAAc,CAAC;YACd,kBAAa,GAAe,EAAE,CAAC;YAGrC,IAAI,MAAM,GAAG,IAAIA,kBAAa,CAAa,CAAC,CAAC,CAAC;YAC9C,IAAI,QAAQ,GAAG,MAAM,CAAC,IAAI,CAACC,kBAAQ,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,cAAM,OAAA,CAAC,GAAA,EAAE,cAAM,OAAA,IAAI,GAAA,CAAC,GAAA,CAAC,EAAEC,gBAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,CAAC,GAAA,CAAC,CAAC,CAAC;YACjG,IAAI,OAAO,GAAG,QAAQ,CAAC,IAAI,CAACC,aAAG,CAAC,UAAC,UAAsB,IAAK,OAAA,UAAU,CAAC,MAAM,EAAE,GAAA,CAAC,CAAC,CAAC;YAElF,IAAI,OAAO,GAAG,IAAIH,kBAAa,CAAqB,CAAC,CAAC,CAAC;YAEvD,8BAA8B,KAAa,EAAE,MAA0B;gBACrE,IAAI,WAAW,GAAG;oBAChB,aAAa,EAAE,MAAM,CAAC,aAAa,CAAC,GAAG,EAAE;oBACzC,UAAU,EAAE,EAAE;oBACd,YAAY,EAAE,EAAE;iBACjB,CAAC;gBAEF,IAAI,KAAK;oBAAE,WAAW,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC;gBACvC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;aAC3B;YAED,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,OAAO,CAAC,EAAE,EAAE,UAAA,UAAU,IAAI,OAAA,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,GAAA,CAAC,CAAC,CAAC;YACrG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,eAAe,CAAC,oBAAoB,CAAC,CAAC,CAAC;YACpF,oBAAoB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YACjC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,MAAM,QAAA,EAAE,QAAQ,UAAA,EAAE,OAAO,SAAA,EAAE,OAAO,SAAA,EAAE,CAAC,CAAC;SACvE;QAED,4BAAO,GAAP;YACE,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,UAAA,YAAY,IAAI,OAAA,YAAY,EAAE,GAAA,CAAC,CAAC;YAC3D,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;SACzB;QACH,iBAAC;IAAD,CAAC,IAAA;QAEY,gBAAgB,GAAG,UAAU;;;;;;;;;;;;;"
}