{
  "version": 3,
  "file": "ui-router-rx.min.js",
  "sources": [
    "@uirouter/rx/ui-router-rx.ts"
  ],
  "sourcesContent": [
    "/** @module rx */\n/** */\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { map, mergeMap, filter } from 'rxjs/operators';\nimport { Transition, UIRouter, StateDeclaration, UIRouterPlugin } from '@uirouter/core';\n\nexport interface StatesChangedEvent {\n  currentStates: StateDeclaration[];\n  registered: StateDeclaration[];\n  deregistered: StateDeclaration[];\n}\n\ndeclare module '@uirouter/core/lib/globals' {\n  interface UIRouterGlobals {\n    states$?: Observable<StatesChangedEvent>;\n    start$?: Observable<Transition>;\n    success$?: Observable<Transition>;\n    params$?: Observable<{ [paramName: string]: any }>;\n  }\n}\n\n/** Augments UIRouterGlobals with observables for transition starts, successful transitions, and state parameters */\nexport class UIRouterRx implements UIRouterPlugin {\n  name = '@uirouter/rx';\n  private deregisterFns: Function[] = [];\n\n  constructor(router: UIRouter) {\n    let start$ = new ReplaySubject<Transition>(1);\n    let success$ = start$.pipe(mergeMap(t => t.promise.then(() => t, () => null)), filter(t => !!t));\n    let params$ = success$.pipe(map((transition: Transition) => transition.params()));\n\n    let states$ = new ReplaySubject<StatesChangedEvent>(1);\n\n    function onStatesChangedEvent(event: string, states: StateDeclaration[]) {\n      let changeEvent = {\n        currentStates: router.stateRegistry.get(),\n        registered: [],\n        deregistered: [],\n      };\n\n      if (event) changeEvent[event] = states;\n      states$.next(changeEvent);\n    }\n\n    this.deregisterFns.push(router.transitionService.onStart({}, transition => start$.next(transition)));\n    this.deregisterFns.push(router.stateRegistry.onStatesChanged(onStatesChangedEvent));\n    onStatesChangedEvent(null, null);\n    Object.assign(router.globals, { start$, success$, params$, states$ });\n  }\n\n  dispose() {\n    this.deregisterFns.forEach(deregisterFn => deregisterFn());\n    this.deregisterFns = [];\n  }\n}\n\nexport const UIRouterRxPlugin = UIRouterRx;\n"
  ],
  "names": [
    "router",
    "this",
    "start$",
    "ReplaySubject",
    "success$",
    "pipe",
    "mergeMap",
    "t",
    "promise",
    "then",
    "filter",
    "params$",
    "map",
    "transition",
    "params",
    "states$",
    "event",
    "states",
    "changeEvent",
    "currentStates",
    "stateRegistry",
    "get",
    "registered",
    "deregistered",
    "next",
    "deregisterFns",
    "push",
    "transitionService",
    "onStart",
    "onStatesChanged",
    "onStatesChangedEvent",
    "Object",
    "assign",
    "globals",
    "UIRouterRx",
    "forEach",
    "deregisterFn",
    "UIRouterRxPlugin"
  ],
  "mappings": ";;;;;;mSA0BE,WAAYA,GAHZC,UAAO,eACCA,sBAGN,IAAIC,EAAS,IAAIC,gBAA0B,GACvCC,EAAWF,EAAOG,KAAKC,WAAS,SAAAC,GAAK,OAAAA,EAAEC,QAAQC,KAAK,WAAM,OAAAF,GAAG,WAAM,OAAA,SAAQG,SAAO,SAAAH,GAAK,QAAEA,KACzFI,EAAUP,EAASC,KAAKO,MAAI,SAACC,GAA2B,OAAAA,EAAWC,YAEnEC,EAAU,IAAIZ,gBAAkC,GAEpD,WAA8Ba,EAAeC,GAC3C,IAAIC,GACFC,cAAenB,EAAOoB,cAAcC,MACpCC,cACAC,iBAGEP,IAAOE,EAAYF,GAASC,GAChCF,EAAQS,KAAKN,GAGfjB,KAAKwB,cAAcC,KAAK1B,EAAO2B,kBAAkBC,WAAY,SAAAf,GAAc,OAAAX,EAAOsB,KAAKX,MACvFZ,KAAKwB,cAAcC,KAAK1B,EAAOoB,cAAcS,gBAAgBC,IAC7DA,EAAqB,KAAM,MAC3BC,OAAOC,OAAOhC,EAAOiC,SAAW/B,SAAQE,WAAUO,UAASI,YAO/D,OAJEmB,oBAAA,WACEjC,KAAKwB,cAAcU,QAAQ,SAAAC,GAAgB,OAAAA,MAC3CnC,KAAKwB,uBAIIY,EAAmBH"
}