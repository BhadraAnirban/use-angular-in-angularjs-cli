{
  "version": 3,
  "file": "uiSrefActive.js",
  "sourceRoot": "",
  "sources": [
    "@uirouter/angular/directives/uiSrefActive.ts"
  ],
  "names": [],
  "mappings": "AACA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,eAAe,CAAC;AAC9E,OAAO,EAAE,YAAY,EAAc,MAAM,gBAAgB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAkGxD,sBAAY,YAA0B,EAAE,GAAc,EAAU;QAAhE,iBAiBC;wBA9B4B,EAAE;0BAMA,EAAE;QAQ/B,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC,YAAY,CAAC,SAAS,CAAC,UAAC,IAAgB;YACxE,KAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAA,GAAG;gBACvB,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;oBAChB,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC;iBACvC;gBAAC,IAAI,CAAC,CAAC;oBACN,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC;iBAC1C;aACF,CAAC,CAAC;YACH,KAAI,CAAC,UAAU,CAAC,OAAO,CAAC,UAAA,GAAG;gBACzB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;oBACf,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC;iBACvC;gBAAC,IAAI,CAAC,CAAC;oBACN,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC;iBAC1C;aACF,CAAC,CAAC;SACJ,CAAC,CAAC;KACJ;0BA5BG,gCAAM;uBAAC,GAAW;YACpB,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;;;;;0BAK/B,kCAAQ;uBAAC,GAAW;YACtB,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;;;;;IAuBrC,kCAAW,GAAX;QACE,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC;KAClC;;gBAtCF,SAAS,SAAC;oBACT,QAAQ,EAAE,iCAAiC;iBAC5C;;;;gBAnFQ,YAAY;gBADwB,SAAS;gBAA3B,UAAU,uBAmGsB,IAAI;;;2BAZ5D,KAAK,SAAC,cAAc;6BAMpB,KAAK,SAAC,gBAAgB;;uBA9FzB;;SAsFa,YAAY",
  "sourcesContent": [
    "/** @ng2api @module directives */ /** */\nimport { Directive, Input, ElementRef, Host, Renderer2 } from '@angular/core';\nimport { UISrefStatus, SrefStatus } from './uiSrefStatus';\nimport { Subscription } from 'rxjs';\n\n/**\n * A directive that adds a CSS class when its associated `uiSref` link is active.\n *\n * ### Purpose\n *\n * This directive should be paired with one (or more) [[UISref]] directives.\n * It will apply a CSS class to its element when the state the `uiSref` targets is activated.\n *\n * This can be used to create navigation UI where the active link is highlighted.\n *\n * ### Selectors\n *\n * - `[uiSrefActive]`: When this selector is used, the class is added when the target state or any\n * child of the target state is active\n * - `[uiSrefActiveEq]`: When this selector is used, the class is added when the target state is\n * exactly active (the class is not added if a child of the target state is active).\n *\n * ### Inputs\n *\n * - `uiSrefActive`/`uiSrefActiveEq`: one or more CSS classes to add to the element, when the `uiSref` is active\n *\n * #### Example:\n * The anchor tag has the `active` class added when the `foo` state is active.\n * ```html\n * <a uiSref=\"foo\" uiSrefActive=\"active\">Foo</a>\n * ```\n *\n * ### Matching parameters\n *\n * If the `uiSref` includes parameters, the current state must be active, *and* the parameter values must match.\n *\n * #### Example:\n * The first anchor tag has the `active` class added when the `foo.bar` state is active and the `id` parameter\n * equals 25.\n * The second anchor tag has the `active` class added when the `foo.bar` state is active and the `id` parameter\n * equals 32.\n * ```html\n * <a uiSref=\"foo.bar\" [uiParams]=\"{ id: 25 }\" uiSrefActive=\"active\">Bar #25</a>\n * <a uiSref=\"foo.bar\" [uiParams]=\"{ id: 32 }\" uiSrefActive=\"active\">Bar #32</a>\n * ```\n *\n * #### Example:\n * A list of anchor tags are created for a list of `bar` objects.\n * An anchor tag will have the `active` class when `foo.bar` state is active and the `id` parameter matches\n * that object's `id`.\n * ```html\n * <li *ngFor=\"let bar of bars\">\n *   <a uiSref=\"foo.bar\" [uiParams]=\"{ id: bar.id }\" uiSrefActive=\"active\">Bar #{{ bar.id }}</a>\n * </li>\n * ```\n *\n * ### Multiple uiSrefs\n *\n * A single `uiSrefActive` can be used for multiple `uiSref` links.\n * This can be used to create (for example) a drop down navigation menu, where the menui is highlighted\n * if *any* of its inner links are active.\n *\n * The `uiSrefActive` should be placed on an ancestor element of the `uiSref` list.\n * If anyof the `uiSref` links are activated, the class will be added to the ancestor element.\n *\n * #### Example:\n * This is a dropdown nagivation menu for \"Admin\" states.\n * When any of `admin.users`, `admin.groups`, `admin.settings` are active, the `<li>` for the dropdown\n * has the `dropdown-child-active` class applied.\n * Additionally, the active anchor tag has the `active` class applied.\n * ```html\n * <ul class=\"dropdown-menu\">\n *   <li uiSrefActive=\"dropdown-child-active\" class=\"dropdown admin\">\n *     Admin\n *     <ul>\n *       <li><a uiSref=\"admin.users\" uiSrefActive=\"active\">Users</a></li>\n *       <li><a uiSref=\"admin.groups\" uiSrefActive=\"active\">Groups</a></li>\n *       <li><a uiSref=\"admin.settings\" uiSrefActive=\"active\">Settings</a></li>\n *     </ul>\n *   </li>\n * </ul>\n * ```\n */\n@Directive({\n  selector: '[uiSrefActive],[uiSrefActiveEq]',\n})\nexport class UISrefActive {\n  private _classes: string[] = [];\n  @Input('uiSrefActive')\n  set active(val: string) {\n    this._classes = val.split(/\\s+/);\n  }\n\n  private _classesEq: string[] = [];\n  @Input('uiSrefActiveEq')\n  set activeEq(val: string) {\n    this._classesEq = val.split(/\\s+/);\n  }\n\n  private _subscription: Subscription;\n  constructor(uiSrefStatus: UISrefStatus, rnd: Renderer2, @Host() host: ElementRef) {\n    this._subscription = uiSrefStatus.uiSrefStatus.subscribe((next: SrefStatus) => {\n      this._classes.forEach(cls => {\n        if (next.active) {\n          rnd.addClass(host.nativeElement, cls);\n        } else {\n          rnd.removeClass(host.nativeElement, cls);\n        }\n      });\n      this._classesEq.forEach(cls => {\n        if (next.exact) {\n          rnd.addClass(host.nativeElement, cls);\n        } else {\n          rnd.removeClass(host.nativeElement, cls);\n        }\n      });\n    });\n  }\n\n  ngOnDestroy() {\n    this._subscription.unsubscribe();\n  }\n}\n"
  ]
}