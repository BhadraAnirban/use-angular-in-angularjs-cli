{
  "version": 3,
  "file": "uiSref.js",
  "sourceRoot": "",
  "sources": [
    "@uirouter/angular/directives/uiSref.ts"
  ],
  "names": [],
  "mappings": "AAEA,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAuC,QAAQ,EAAE,MAAM,gBAAgB,CAAC;AACjG,OAAO,EACL,SAAS,EACT,MAAM,EACN,KAAK,EACL,QAAQ,EACR,UAAU,EACV,SAAS,EAGT,YAAY,GACb,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,MAAM,EAAsB,MAAM,UAAU,CAAC;AACtD,OAAO,EAAE,aAAa,EAAgB,MAAM,MAAM,CAAC;;;;;;IAQjD,sBAAmB,GAAe,EAAS,SAAoB;QAA5C,QAAG,GAAH,GAAG,CAAY;QAAS,cAAS,GAAT,SAAS,CAAW;KAAI;IACnE,mCAAY,GAAZ;QACE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,MAAM,KAAK,QAAQ,CAAC;KACnD;IACD,6BAAM,GAAN,UAAO,IAAY;QACjB,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,KAAK,EAAE,CAAC,CAAC,CAAC;YACxB,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;SAClE;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;SAChE;KACF;;gBAZF,SAAS,SAAC,EAAE,QAAQ,EAAE,WAAW,EAAE;;;;gBAblC,UAAU;gBACV,SAAS;;uBATX;;SAsBa,YAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAmGvB,gBACE,OAAiB,EACL,eACkB;QAHhC,iBAUC;;;;;4BAlBqB,IAAI,aAAa,CAAc,CAAC,CAAC;yCAEnB,KAAK;QAWvC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QAEtB,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,cAAM,OAAA,KAAI,CAAC,MAAM,EAAE,EAAb,CAAa,CAAC,CAAC;KAC1E;IAGD,sBAAI,0BAAM;QADV,mBAAmB;;QACnB,UAAW,GAAW;YACpB,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;YACjB,IAAI,CAAC,MAAM,EAAE,CAAC;SACf;;;OAAA;IAED,sBAAI,4BAAQ;QADZ,mBAAmB;;QACnB,UAAa,GAAQ;YACnB,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC;YAClB,IAAI,CAAC,MAAM,EAAE,CAAC;SACf;;;OAAA;IAED,sBAAI,6BAAS;QADb,mBAAmB;;QACnB,UAAc,GAAsB;YAClC,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;YACnB,IAAI,CAAC,MAAM,EAAE,CAAC;SACf;;;OAAA;IAED,yBAAQ,GAAR;QACE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,MAAM,EAAE,CAAC;KACf;IAED,4BAAW,GAAX,UAAY,OAAsB;QAChC,IAAI,CAAC,MAAM,EAAE,CAAC;KACf;IAED,4BAAW,GAAX;QACE,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC;QAC9B,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;KACjC;IAEO,uBAAM,GAAd;QACE,IAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC;QACzC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACf,IAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;YAC5E,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SACnC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACvB,IAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;YACrE,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;SACjC;KACF;IAED,2BAAU,GAAV;QACE,IAAM,WAAW,GAAsB;YACrC,QAAQ,EAAE,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI;YAC3E,OAAO,EAAE,IAAI;YACb,MAAM,EAAE,MAAM;SACf,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,IAAI,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC;KAChD;;IAID,mBAAE;cAAC,MAAc,EAAE,OAAgB,EAAE,OAAgB;QACnD,EAAE,CAAC,CACD,CAAC,IAAI,CAAC,aAAa;YACjB,CAAC,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,IAAI,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,OAAO,IAAI,OAAO,CAAC,CAAC;YAC3F,CAAC,IAAI,CAAC,KACR,CAAC,CAAC,CAAC;YACD,MAAM,CAAC;SACR;QAED,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;QACzE,MAAM,CAAC,KAAK,CAAC;;;gBAzHhB,SAAS,SAAC;oBACT,QAAQ,EAAE,UAAU;oBACpB,QAAQ,EAAE,QAAQ;iBACnB;;;;gBA9EQ,QAAQ;gBAoBJ,YAAY,uBAqGpB,QAAQ;gDACR,MAAM,SAAC,MAAM,CAAC,aAAa;;;0BAnC7B,KAAK,SAAC,QAAQ;2BASd,KAAK,SAAC,UAAU;4BAShB,KAAK,SAAC,WAAW;uBAgFjB,YAAY,SAAC,OAAO,EAAE,CAAC,eAAe,EAAE,gBAAgB,EAAE,gBAAgB,CAAC;;iBA3L9E;;SAiFa,MAAM",
  "sourcesContent": [
    "/** @ng2api @module directives */\n/** */\nimport { UIRouter, extend, Obj, TransitionOptions, TargetState, isNumber } from '@uirouter/core';\nimport {\n  Directive,\n  Inject,\n  Input,\n  Optional,\n  ElementRef,\n  Renderer2,\n  OnChanges,\n  SimpleChanges,\n  HostListener,\n} from '@angular/core';\nimport { UIView, ParentUIViewInject } from './uiView';\nimport { ReplaySubject, Subscription } from 'rxjs';\n\n/**\n * @internalapi\n * # blah blah blah\n */\n@Directive({ selector: 'a[uiSref]' })\nexport class AnchorUISref {\n  constructor(public _el: ElementRef, public _renderer: Renderer2) {}\n  openInNewTab() {\n    return this._el.nativeElement.target === '_blank';\n  }\n  update(href: string) {\n    if (href && href !== '') {\n      this._renderer.setProperty(this._el.nativeElement, 'href', href);\n    } else {\n      this._renderer.removeAttribute(this._el.nativeElement, 'href');\n    }\n  }\n}\n\n/**\n * A directive when clicked, initiates a [[Transition]] to a [[TargetState]].\n *\n * ### Purpose\n *\n * This directive is applied to anchor tags (`<a>`) or any other clickable element.  It is a state reference (or sref --\n * similar to an href).  When clicked, the directive will transition to that state by calling [[StateService.go]],\n * and optionally supply state parameter values and transition options.\n *\n * When this directive is on an anchor tag, it will also add an `href` attribute to the anchor.\n *\n * ### Selector\n *\n * - `[uiSref]`: The directive is created as an attribute on an element, e.g., `<a uiSref></a>`\n *\n * ### Inputs\n *\n * - `uiSref`: the target state's name, e.g., `uiSref=\"foostate\"`.  If a component template uses a relative `uiSref`,\n * e.g., `uiSref=\".child\"`, the reference is relative to that component's state.\n *\n * - `uiParams`: any target state parameter values, as an object, e.g., `[uiParams]=\"{ fooId: bar.fooId }\"`\n *\n * - `uiOptions`: [[TransitionOptions]], e.g., `[uiOptions]=\"{ inherit: false }\"`\n *\n * @example\n * ```html\n *\n * <!-- Targets bar state' -->\n * <a uiSref=\"bar\">Bar</a>\n *\n * <!-- Assume this component's state is \"foo\".\n *      Relatively targets \"foo.child\" -->\n * <a uiSref=\".child\">Foo Child</a>\n *\n * <!-- Targets \"bar\" state and supplies parameter value -->\n * <a uiSref=\"bar\" [uiParams]=\"{ barId: foo.barId }\">Bar {{foo.barId}}</a>\n *\n * <!-- Targets \"bar\" state and parameter, doesn't inherit existing parameters-->\n * <a uiSref=\"bar\" [uiParams]=\"{ barId: foo.barId }\" [uiOptions]=\"{ inherit: false }\">Bar {{foo.barId}}</a>\n * ```\n */\n@Directive({\n  selector: '[uiSref]',\n  exportAs: 'uiSref',\n})\nexport class UISref implements OnChanges {\n  /**\n   * `@Input('uiSref')` The name of the state to link to\n   *\n   * ```html\n   * <a uiSref=\"hoome\">Home</a>\n   * ```\n   */\n  @Input('uiSref') state: string;\n\n  /**\n   * `@Input('uiParams')` The parameter values to use (as key/values)\n   *\n   * ```html\n   * <a uiSref=\"book\" [uiParams]=\"{ bookId: book.id }\">Book {{ book.name }}</a>\n   * ```\n   */\n  @Input('uiParams') params: any;\n\n  /**\n   * `@Input('uiOptions')` The transition options\n   *\n   * ```html\n   * <a uiSref=\"books\" [uiOptions]=\"{ reload: true }\">Book {{ book.name }}</a>\n   * ```\n   */\n  @Input('uiOptions') options: TransitionOptions;\n\n  /**\n   * An observable (ReplaySubject) of the state this UISref is targeting.\n   * When the UISref is clicked, it will transition to this [[TargetState]].\n   */\n  public targetState$ = new ReplaySubject<TargetState>(1);\n\n  /** @internalapi */ private _emit = false;\n  /** @internalapi */ private _statesSub: Subscription;\n  /** @internalapi */ private _router: UIRouter;\n  /** @internalapi */ private _anchorUISref: AnchorUISref;\n  /** @internalapi */ private _parent: ParentUIViewInject;\n\n  constructor(\n    _router: UIRouter,\n    @Optional() _anchorUISref: AnchorUISref,\n    @Inject(UIView.PARENT_INJECT) parent: ParentUIViewInject\n  ) {\n    this._router = _router;\n    this._anchorUISref = _anchorUISref;\n    this._parent = parent;\n\n    this._statesSub = _router.globals.states$.subscribe(() => this.update());\n  }\n\n  /** @internalapi */\n  set uiSref(val: string) {\n    this.state = val;\n    this.update();\n  }\n  /** @internalapi */\n  set uiParams(val: Obj) {\n    this.params = val;\n    this.update();\n  }\n  /** @internalapi */\n  set uiOptions(val: TransitionOptions) {\n    this.options = val;\n    this.update();\n  }\n\n  ngOnInit() {\n    this._emit = true;\n    this.update();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  ngOnDestroy() {\n    this._emit = false;\n    this._statesSub.unsubscribe();\n    this.targetState$.unsubscribe();\n  }\n\n  private update() {\n    const $state = this._router.stateService;\n    if (this._emit) {\n      const newTarget = $state.target(this.state, this.params, this.getOptions());\n      this.targetState$.next(newTarget);\n    }\n\n    if (this._anchorUISref) {\n      const href = $state.href(this.state, this.params, this.getOptions());\n      this._anchorUISref.update(href);\n    }\n  }\n\n  getOptions() {\n    const defaultOpts: TransitionOptions = {\n      relative: this._parent && this._parent.context && this._parent.context.name,\n      inherit: true,\n      source: 'sref',\n    };\n    return extend(defaultOpts, this.options || {});\n  }\n\n  /** When triggered by a (click) event, this function transitions to the UISref's target state */\n  @HostListener('click', ['$event.button', '$event.ctrlKey', '$event.metaKey'])\n  go(button: number, ctrlKey: boolean, metaKey: boolean) {\n    if (\n      (this._anchorUISref &&\n        (this._anchorUISref.openInNewTab() || button || !isNumber(button) || ctrlKey || metaKey)) ||\n      !this.state\n    ) {\n      return;\n    }\n\n    this._router.stateService.go(this.state, this.params, this.getOptions());\n    return false;\n  }\n}\n"
  ]
}