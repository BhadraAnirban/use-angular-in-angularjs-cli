{
  "version": 3,
  "file": "ui-router-angular-hybrid.js",
  "sources": [
    "@uirouter/angular-hybrid/angular-hybrid.ts"
  ],
  "sourcesContent": [
    "import * as angular from 'angular';\n\nimport { Component, ElementRef, Inject, Injector, Input, ModuleWithProviders, NgModule } from '@angular/core';\nimport { downgradeComponent, UpgradeModule } from '@angular/upgrade/static';\n\nimport {\n  StateObject,\n  forEach,\n  PathNode,\n  Resolvable,\n  StateRegistry,\n  UIRouter,\n  ViewConfig,\n  ViewService,\n} from '@uirouter/core';\n\nimport {\n  applyModuleConfig,\n  NATIVE_INJECTOR_TOKEN,\n  ng2LazyLoadBuilder,\n  Ng2ViewConfig,\n  UIView,\n  _UIROUTER_SERVICE_PROVIDERS,\n  Ng2ViewDeclaration,\n  ParentUIViewInject,\n  StatesModule,\n  UIROUTER_MODULE_TOKEN,\n  UIROUTER_ROOT_MODULE,\n  UIRouterModule,\n  makeChildProviders,\n} from '@uirouter/angular';\n\nimport { $InjectorLike, Ng1ViewConfig } from '@uirouter/angularjs';\n\nimport { UIRouterRx } from '@uirouter/rx';\nimport { NgHybridStatesModule } from './interfaces';\n\n/**\n * Create a ng1 module for the ng1 half of the hybrid application to depend on.\n *\n * Example:\n * const myApp = angular.module('myApp', ['ui.router.upgrade']);\n */\nexport const upgradeModule = angular.module('ui.router.upgrade', ['ui.router']);\n\nexport function objectFactory() {\n  return {};\n}\n\n/**\n * UIViewNgUpgrade is a component bridge from ng1 ui-view to ng2 ui-view\n *\n * When a ui-router for ng1 is registering a state it checks if a view's\n * `component:` is an ng2 Component class. If so, it creates a special ng1 template\n * which references this component, i.e., <ui-view-ng-upgrade></ui-view-ng-upgrade>\n *\n * See that code by searching ng1-to-ng2 source for: \"$stateProvider.decorator\"\n *\n * ---\n *\n * ng1-to-ng2 component bridge process:\n *\n * 1)\n * When an ng1 template creates a ui-view which is targeted by a ng2 Component,\n *\n * ```\n * <a ui-sref=\"foo\">Go to foo</a>\n * <div ui-view> <!-- ui-view created in ng1 template -->\n * </div> <!-- targeted with { component: Ng2RoutedComponent } -->\n * ```\n *\n * the state decorator spits out a custom template.  That template loads this\n * ng2 Component adapter as a downgraded-to-ng1 directive.\n *\n * ```\n * <a ui-sref=\"foo\">Go to foo</a>\n * <div ui-view> <!-- decorated template references the downgraded component -->\n *   <ui-view-ng-upgrade> <!-- downgraded adapter component -->\n *   </ui-view-ng-upgrade>\n * </div>\n * ```\n *\n * This downgraded ng2 Component then creates a child UIView (ng2 component)\n *\n * ```\n * <a ui-sref=\"foo\">Go to foo</a>\n * <div ui-view> <!-- custom template references the downgraded component -->\n *   <ui-view-ng-upgrade> <!-- ng2 component adapter downgraded to ng1-->\n *     <ui-view> <!-- pure ng2 ui-view -->\n *      </ui-view>\n *   </ui-view-ng-upgrade>\n * </div>\n * ```\n *\n * which in turn is filled with the routed ng2 component.\n *\n * ```\n * <a ui-sref=\"foo\">Go to foo</a>\n * <div ui-view> <!-- ng1 ui-view -->\n *   <ui-view-ng-upgrade> <!-- ng2 component adapter (downgraded to ng1)-->\n *     <ui-view> <!-- pure ng2 ui-view -->\n *       <ng2-routed-component> <!-- ng2 component hosted in ng2 ui-view -->\n *         <h1>ng2 routed component contents</h1>\n *       </ng2-routed-component>\n *     </ui-view>\n *   </ui-view-ng-upgrade>\n * </div>\n * ```\n *\n * This adapter exposes exposes the parent view context (ParentUIViewInject)\n * as an ng2 DI Provider, which the nested ng2 UIView requires.\n *\n * It gets the ParentUIViewContext information (from the parent ng1 ui-view) by walking\n * up the DOM and grabbing the .data('$uiView') which the ng1 ui-view directive exposes.\n */\n@Component({\n  selector: 'ui-view-ng-upgrade',\n  template: `<ui-view [name]=\"name\"></ui-view>`,\n  // provide a blank object as PARENT_INJECT.\n  // The component will add property getters when it is constructed.\n  viewProviders: [{ provide: UIView.PARENT_INJECT, useFactory: objectFactory }],\n})\nexport class UIViewNgUpgrade {\n  // The ui-view's name (or '$default')\n  @Input() name: string;\n\n  constructor(\n    ref: ElementRef,\n    @Inject(UIView.PARENT_INJECT) parent: ParentUIViewInject,\n    registry: StateRegistry // access the root state\n  ) {\n    // From the ui-view-ng-upgrade component's element ref, walk up the DOM two elements...\n    // There will first be an ng1 ui-view which hosts this element, and then that ui-view's parent element.\n    // That (parent) element has access to the proper \"parent viewcontext\"\n\n    // The ng2 ui-view component is inside this ui-view-ng-upgrade directive, which is inside the ng1 \"host\" ui-view.\n    // Both ui-views share the same \"view context\" information (the view's fqn and created-by-state context information)\n    const ng1elem = angular\n      .element(ref.nativeElement)\n      .parent()\n      .parent();\n\n    // Expose getters on PARENT_INJECT for context (creation state) and fqn (view address)\n    // These will be used by further nested UIView\n    Object.defineProperty(parent, 'context', {\n      get: function() {\n        const data = ng1elem['inheritedData']('$uiView');\n        return data && data.$cfg ? data.$cfg.viewDecl.$context : registry.root();\n      },\n      enumerable: true,\n    });\n\n    Object.defineProperty(parent, 'fqn', {\n      get: function() {\n        const data = ng1elem['inheritedData']('$uiView');\n        return data && data.$uiView ? data.$uiView.fqn : null;\n      },\n      enumerable: true,\n    });\n  }\n}\n\n/**********************************\n * Ng2 @NgModule and bootstrap code\n **********************************/\n\n// Register the ng1 DI '$uiRouter' object as an ng2 Provider.\nexport function uiRouterUpgradeFactory(router: UIRouter, injector: Injector) {\n  const modules: StatesModule[] = injector.get<StatesModule[]>(UIROUTER_MODULE_TOKEN, []);\n  modules.forEach(module => applyModuleConfig(router, injector, module));\n  return router;\n}\n\nexport function getUIRouter($injector: any) {\n  return $injector.get('$uiRouter');\n}\n\nexport function getParentUIViewInject(r: StateRegistry): ParentUIViewInject {\n  return { fqn: null, context: r.root() };\n}\n\n/**\n * This NgModule should be added to the root module of the hybrid app.\n */\n@NgModule({\n  imports: [UIRouterModule, UpgradeModule],\n  declarations: [UIViewNgUpgrade],\n  providers: [\n    // @uirouter/angular code will use the ng1 $uiRouter instance instead of creating its own.\n    { provide: '$uiRouter', useFactory: getUIRouter, deps: ['$injector'] },\n\n    { provide: UIRouter, useFactory: uiRouterUpgradeFactory, deps: ['$uiRouter', Injector] },\n\n    { provide: UIROUTER_ROOT_MODULE, useValue: {}, multi: true },\n\n    { provide: UIView.PARENT_INJECT, useFactory: getParentUIViewInject, deps: [StateRegistry] },\n\n    ..._UIROUTER_SERVICE_PROVIDERS,\n  ],\n  entryComponents: [UIViewNgUpgrade],\n  exports: [UIViewNgUpgrade, UIRouterModule],\n})\nexport class UIRouterUpgradeModule {\n  static forRoot(module: NgHybridStatesModule = {}): ModuleWithProviders {\n    return {\n      ngModule: UIRouterUpgradeModule,\n      providers: makeChildProviders(module as StatesModule),\n    };\n  }\n\n  static forChild(module: NgHybridStatesModule = {}): ModuleWithProviders {\n    return {\n      ngModule: UIRouterModule,\n      providers: makeChildProviders(module as StatesModule),\n    };\n  }\n}\n\n// Downgrade the UIViewNgUpgrade ng2 Component to an ng1 directive.\n// The directive is used in a (generated) view template by the (host) ng1 ui-router,\n// whenever it finds a view configured with a `component: <Ng2ComponentClass>`\nupgradeModule.directive('uiViewNgUpgrade', <any>downgradeComponent({\n  component: UIViewNgUpgrade,\n  inputs: ['name'],\n}));\n\nupgradeModule.run([\n  '$injector',\n  (ng1Injector: $InjectorLike) => {\n    const $uiRouter: UIRouter = ng1Injector.get('$uiRouter');\n\n    /** Add support for observable state and param changes */\n    $uiRouter.plugin(UIRouterRx);\n\n    // Expose a merged ng1/ng2 injector as a Resolvable (on the root state).\n    // This mimics how ui-router-ng2 exposes the root ng2 Injector, but\n    // it retrieves from ng1 injector first, then ng2 injector if the token isn't found.\n    const mergedInjector = {\n      get: function(token: any, ng2NotFoundValue?: any) {\n        const ng2Injector = ng1Injector.get('$$angularInjector');\n        return (ng1Injector.has(token) && ng1Injector.get(token)) || ng2Injector.get(token, ng2NotFoundValue);\n      },\n    };\n\n    const ng2InjectorResolvable = Resolvable.fromData(NATIVE_INJECTOR_TOKEN, mergedInjector);\n    $uiRouter.stateRegistry.root().resolvables.push(ng2InjectorResolvable);\n  },\n]);\n\n/** Adds support for `loadChildren`: Angular NgModule lazy loading via @gntools/webpack */\nupgradeModule.config([\n  '$stateRegistryProvider',\n  ($stateRegistry: StateRegistry) => {\n    $stateRegistry.decorator('lazyLoad', ng2LazyLoadBuilder);\n  },\n]);\n\n/**\n * Define a stateProvider `views` builder decorator.\n * The decorator first applies the standard views builder function.\n * Then it finds any view components which are **actually** a Ng2 Component Class.\n * It overwrites that view's config with a ng1-to-ng2 hybrid config.\n *\n * In place of the template provider, it simply puts a <ui-view-ng-upgrade/> component\n * which that provides a ng1 -> ng2 boundary in the component tree.\n */\nupgradeModule.config([\n  '$stateRegistryProvider',\n  ($stateRegistry: StateRegistry) => {\n    $stateRegistry.decorator('views', function(state: StateObject, parentFn: Function) {\n      const views = parentFn(state);\n\n      forEach(views, (viewDecl: any, viewName: string) => {\n        if (viewDecl.$type === 'ng1-to-ng2' || typeof viewDecl.component === 'function') {\n          // Update the view config.\n          // Override default ng1 `component:` behavior (of defining a templateProvider)\n          // with a <ui-view-ng-upgrade> adapter directive template\n          viewDecl.$type = 'ng1-to-ng2';\n          viewDecl.templateProvider = null;\n          viewDecl.template = `<ui-view-ng-upgrade name='${viewDecl.$uiViewName}'></ui-view-ng-upgrade>`;\n        }\n      });\n      return views;\n    });\n  },\n]);\n\n// UI-Router ViewConfig factories take a view declaration object from a state.views: { foo: <ViewDeclaration> }\n// and return a runtime config object (a ViewConfig)\nupgradeModule.run([\n  '$view',\n  '$templateFactory',\n  ($view: ViewService, $templateFactory: any) => {\n    // Register a ViewConfig factory for views of type `ng2`\n    $view._pluginapi._viewConfigFactory(\n      'ng2',\n      (path: PathNode[], config: Ng2ViewDeclaration) => new Ng2ViewConfig(path, config)\n    );\n\n    // Register a ViewConfig factory for views of type `ng1-to-ng2`.\n    // Returns both an ng1 config and an ng2 config allowing either ng1 or ng2 ui-view components to be targeted.\n    $view._pluginapi._viewConfigFactory('ng1-to-ng2', (path: PathNode[], config: Ng2ViewDeclaration) => {\n      const ng1ViewConfig: ViewConfig = <any>new Ng1ViewConfig(\n        <any>path,\n        <any>Object.assign({}, config, { $type: 'ng1' }),\n        $templateFactory\n      );\n      const ng2ViewConfig: ViewConfig = <any>new Ng2ViewConfig(\n        <any>path,\n        <any>Object.assign({}, config, { $type: 'ng2' })\n      );\n\n      return [ng2ViewConfig, ng1ViewConfig];\n    });\n  },\n]);\n"
  ],
  "names": [
    "angular.module",
    "angular\n            .element",
    "Component",
    "UIView",
    "ElementRef",
    "Inject",
    "StateRegistry",
    "Input",
    "UIROUTER_MODULE_TOKEN",
    "applyModuleConfig",
    "makeChildProviders",
    "UIRouterModule",
    "NgModule",
    "UpgradeModule",
    "UIRouter",
    "Injector",
    "UIROUTER_ROOT_MODULE",
    "_UIROUTER_SERVICE_PROVIDERS",
    "downgradeComponent",
    "UIRouterRx",
    "Resolvable",
    "NATIVE_INJECTOR_TOKEN",
    "ng2LazyLoadBuilder",
    "forEach",
    "Ng2ViewConfig",
    "Ng1ViewConfig"
  ],
  "mappings": "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"
}