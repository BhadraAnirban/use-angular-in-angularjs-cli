{
  "version": 3,
  "file": "ui-router-ng2.min.js",
  "sources": [
    "@uirouter/angular/statebuilders/views.ts",
    "@uirouter/angular/mergeInjector.ts",
    "@uirouter/angular/directives/uiView.ts",
    "@uirouter/angular/uiRouterConfig.ts",
    "@uirouter/angular/directives/uiSref.ts",
    "@uirouter/angular/directives/uiSrefStatus.ts",
    "@uirouter/angular/directives/uiSrefActive.ts",
    "@uirouter/angular/directives/directives.ts",
    "@uirouter/angular/uiRouterNgModule.ts",
    "@uirouter/angular/lazyLoad/lazyLoadNgModule.ts",
    "@uirouter/angular/statebuilders/lazyLoad.ts",
    "../node_modules/tslib/tslib.es6.js",
    "@uirouter/angular/location/locationService.ts",
    "@uirouter/angular/location/locationConfig.ts",
    "@uirouter/angular/providers.ts"
  ],
  "sourcesContent": [
    "/** @module ng2 */ /** */\nimport { isFunction, StateObject } from '@uirouter/core';\nimport { PathNode } from '@uirouter/core';\nimport { pick, forEach } from '@uirouter/core';\nimport { ViewConfig } from '@uirouter/core';\nimport { Ng2ViewDeclaration } from '../interface';\nimport { services } from '@uirouter/core';\nimport { ViewService } from '@uirouter/core';\n\n/**\n * This is a [[StateBuilder.builder]] function for Angular `views`.\n *\n * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\n * handles the `views` property with logic specific to @uirouter/angular.\n *\n * If no `views: {}` property exists on the [[StateDeclaration]], then it creates the `views` object and\n * applies the state-level configuration to a view named `$default`.\n */\nexport function ng2ViewsBuilder(state: StateObject) {\n  const views: { [key: string]: Ng2ViewDeclaration } = {},\n    viewsObject = state.views || { $default: pick(state, ['component', 'bindings']) };\n\n  forEach(viewsObject, function(config: Ng2ViewDeclaration, name: string) {\n    name = name || '$default'; // Account for views: { \"\": { template... } }\n    if (isFunction(config)) config = { component: config as any };\n    if (Object.keys(config).length === 0) return;\n\n    config.$type = 'ng2';\n    config.$context = state;\n    config.$name = name;\n\n    const normalized = ViewService.normalizeUIViewTarget(config.$context, config.$name);\n    config.$uiViewName = normalized.uiViewName;\n    config.$uiViewContextAnchor = normalized.uiViewContextAnchor;\n\n    views[name] = config;\n  });\n  return views;\n}\n\nlet id = 0;\nexport class Ng2ViewConfig implements ViewConfig {\n  $id: number = id++;\n  loaded = true;\n\n  constructor(public path: PathNode[], public viewDecl: Ng2ViewDeclaration) {}\n\n  load() {\n    return services.$q.when(this);\n  }\n}\n",
    "/** @module ng2 */ /** */\nimport { Injector } from '@angular/core';\n\n/**\n * Merge two injectors\n *\n * This class implements the Injector ng2 interface but delegates\n * to the Injectors provided in the constructor.\n */\nexport class MergeInjector implements Injector {\n  static NOT_FOUND = {};\n  private injectors: Injector[];\n  constructor(...injectors: Injector[]) {\n    if (injectors.length < 2) throw new Error('pass at least two injectors');\n    this.injectors = injectors;\n  }\n\n  /**\n   * Get the token from the first injector which contains it.\n   *\n   * Delegates to the first Injector.get().\n   * If not found, then delegates to the second Injector (and so forth).\n   * If no Injector contains the token, return the `notFoundValue`, or throw.\n   *\n   * @param token the DI token\n   * @param notFoundValue the value to return if none of the Injectors contains the token.\n   * @returns {any} the DI value\n   */\n  get(token: any, notFoundValue?: any): any {\n    for (let i = 0; i < this.injectors.length; i++) {\n      const val = this.injectors[i].get(token, MergeInjector.NOT_FOUND);\n      if (val !== MergeInjector.NOT_FOUND) return val;\n    }\n\n    if (arguments.length >= 2) return notFoundValue;\n\n    // This will throw the DI Injector error\n    this.injectors[0].get(token);\n  }\n}\n",
    "/** @ng2api @module directives */\n/** */\nimport {\n  Component,\n  ComponentFactory,\n  ComponentFactoryResolver,\n  ComponentRef,\n  Inject,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  ReflectiveInjector,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\n\nimport {\n  ActiveUIView,\n  filter,\n  inArray,\n  isFunction,\n  NATIVE_INJECTOR_TOKEN,\n  Param,\n  parse,\n  PathNode,\n  ResolveContext,\n  StateDeclaration,\n  trace,\n  Transition,\n  TransitionHookFn,\n  UIRouter,\n  unnestR,\n  ViewConfig,\n  ViewContext,\n} from '@uirouter/core';\nimport { Ng2ViewConfig } from '../statebuilders/views';\nimport { MergeInjector } from '../mergeInjector';\nimport { Ng2Component } from '../interface';\n\n/** @hidden */\nlet id = 0;\n\n/** @internalapi These are provide()d as the string UIView.PARENT_INJECT */\nexport interface ParentUIViewInject {\n  context: ViewContext;\n  fqn: string;\n}\n\n/** @internalapi */\ninterface InputMapping {\n  token: string;\n  prop: string;\n}\n\n/**\n * Given a component class, gets the inputs of styles:\n *\n * - @Input('foo') _foo\n * - `inputs: ['foo']`\n *\n * @internalapi\n */\nconst ng2ComponentInputs = (factory: ComponentFactory<any>): InputMapping[] => {\n  return factory.inputs.map(input => ({ prop: input.propName, token: input.templateName }));\n};\n\n/**\n * A UI-Router viewport directive, which is filled in by a view (component) on a state.\n *\n * ### Selector\n *\n * A `ui-view` directive can be created as an element: `<ui-view></ui-view>` or as an attribute: `<div ui-view></div>`.\n *\n * ### Purpose\n *\n * This directive is used in a Component template (or as the root component) to create a viewport.  The viewport\n * is filled in by a view (as defined by a [[Ng2ViewDeclaration]] inside a [[Ng2StateDeclaration]]) when the view's\n * state has been activated.\n *\n * #### Example:\n * ```js\n * // This app has two states, 'foo' and 'bar'\n * stateRegistry.register({ name: 'foo', url: '/foo', component: FooComponent });\n * stateRegistry.register({ name: 'bar', url: '/bar', component: BarComponent });\n * ```\n * ```html\n * <!-- This ui-view will be filled in by the foo state's component or\n *      the bar state's component when the foo or bar state is activated -->\n * <ui-view></ui-view>\n * ```\n *\n * ### Named ui-views\n *\n * A `ui-view` may optionally be given a name via the attribute value: `<div ui-view='header'></div>`.  *Note:\n * an unnamed `ui-view` is internally named `$default`*.   When a `ui-view` has a name, it will be filled in\n * by a matching named view.\n *\n * #### Example:\n * ```js\n * stateRegistry.register({\n *   name: 'foo',\n *   url: '/foo',\n *   views: { header: HeaderComponent, $default: FooComponent });\n * ```\n * ```html\n * <!-- When 'foo' state is active, filled by HeaderComponent -->\n * <div ui-view=\"header\"></div>\n *\n * <!-- When 'foo' state is active, filled by FooComponent -->\n * <ui-view></ui-view>\n * ```\n */\n@Component({\n  selector: 'ui-view, [ui-view]',\n  exportAs: 'uiView',\n  template: `\n    <ng-template #componentTarget></ng-template>\n    <ng-content *ngIf=\"!_componentRef\"></ng-content>\n  `,\n})\nexport class UIView implements OnInit, OnDestroy {\n  static PARENT_INJECT = 'UIView.PARENT_INJECT';\n\n  @ViewChild('componentTarget', { read: ViewContainerRef })\n  _componentTarget: ViewContainerRef;\n  @Input('name') name: string;\n\n  @Input('ui-view')\n  set _name(val: string) {\n    this.name = val;\n  }\n\n  /** The reference to the component currently inside the viewport */\n  _componentRef: ComponentRef<any>;\n  /** Deregisters the ui-view from the view service */\n  private _deregisterUIView: Function;\n  /** Deregisters the master uiCanExit transition hook */\n  private _deregisterUiCanExitHook: Function;\n  /** Deregisters the master uiOnParamsChanged transition hook */\n  private _deregisterUiOnParamsChangedHook: Function;\n  /** Data about the this UIView */\n  private _uiViewData: ActiveUIView = <any>{};\n  private _parent: ParentUIViewInject;\n\n  constructor(\n    public router: UIRouter,\n    @Inject(UIView.PARENT_INJECT) parent,\n    public viewContainerRef: ViewContainerRef\n  ) {\n    this._parent = parent;\n  }\n\n  /**\n   * @returns the UI-Router `state` that is filling this uiView, or `undefined`.\n   */\n  public get state(): StateDeclaration {\n    return parse('_uiViewData.config.viewDecl.$context.self')(this);\n  }\n\n  ngOnInit() {\n    const router = this.router;\n    const parentFqn = this._parent.fqn;\n    const name = this.name || '$default';\n\n    this._uiViewData = {\n      $type: 'ng2',\n      id: id++,\n      name: name,\n      fqn: parentFqn ? parentFqn + '.' + name : name,\n      creationContext: this._parent.context,\n      configUpdated: this._viewConfigUpdated.bind(this),\n      config: undefined,\n    };\n\n    this._deregisterUiCanExitHook = router.transitionService.onBefore({}, trans => {\n      return this._invokeUiCanExitHook(trans);\n    });\n\n    this._deregisterUiOnParamsChangedHook = router.transitionService.onSuccess({}, trans =>\n      this._invokeUiOnParamsChangedHook(trans)\n    );\n\n    this._deregisterUIView = router.viewService.registerUIView(this._uiViewData);\n  }\n\n  /**\n   * For each transition, checks the component loaded in the ui-view for:\n   *\n   * - has a uiCanExit() component hook\n   * - is being exited\n   *\n   * If both are true, adds the uiCanExit component function as a hook to that singular Transition.\n   */\n  private _invokeUiCanExitHook(trans: Transition) {\n    const instance = this._componentRef && this._componentRef.instance;\n    const uiCanExitFn: TransitionHookFn = instance && instance.uiCanExit;\n\n    if (isFunction(uiCanExitFn)) {\n      const state: StateDeclaration = this.state;\n\n      if (trans.exiting().indexOf(state) !== -1) {\n        trans.onStart({}, function() {\n          return uiCanExitFn.call(instance, trans);\n        });\n      }\n    }\n  }\n\n  /**\n   * For each transition, checks if any param values changed and notify component\n   */\n  private _invokeUiOnParamsChangedHook($transition$: Transition) {\n    const instance: Ng2Component = this._componentRef && this._componentRef.instance;\n    const uiOnParamsChanged: TransitionHookFn = instance && instance.uiOnParamsChanged;\n\n    if (isFunction(uiOnParamsChanged)) {\n      const viewState: StateDeclaration = this.state;\n      const resolveContext: ResolveContext = new ResolveContext(this._uiViewData.config.path);\n      const viewCreationTrans = resolveContext.getResolvable('$transition$').data;\n\n      // Exit early if the $transition$ is the same as the view was created within.\n      // Exit early if the $transition$ will exit the state the view is for.\n      if ($transition$ === viewCreationTrans || $transition$.exiting().indexOf(viewState as StateDeclaration) !== -1)\n        return;\n\n      const toParams: { [paramName: string]: any } = $transition$.params('to');\n      const fromParams: { [paramName: string]: any } = $transition$.params('from');\n      const getNodeSchema = (node: PathNode) => node.paramSchema;\n      const toSchema: Param[] = $transition$\n        .treeChanges('to')\n        .map(getNodeSchema)\n        .reduce(unnestR, []);\n      const fromSchema: Param[] = $transition$\n        .treeChanges('from')\n        .map(getNodeSchema)\n        .reduce(unnestR, []);\n\n      // Find the to params that have different values than the from params\n      const changedToParams = toSchema.filter((param: Param) => {\n        const idx = fromSchema.indexOf(param);\n        return idx === -1 || !fromSchema[idx].type.equals(toParams[param.id], fromParams[param.id]);\n      });\n\n      // Only trigger callback if a to param has changed or is new\n      if (changedToParams.length) {\n        const changedKeys: string[] = changedToParams.map(x => x.id);\n        // Filter the params to only changed/new to params.  `$transition$.params()` may be used to get all params.\n        const newValues = filter(toParams, (val, key) => changedKeys.indexOf(key) !== -1);\n        instance.uiOnParamsChanged(newValues, $transition$);\n      }\n    }\n  }\n\n  private _disposeLast() {\n    if (this._componentRef) this._componentRef.destroy();\n    this._componentRef = null;\n  }\n\n  ngOnDestroy() {\n    if (this._deregisterUIView) this._deregisterUIView();\n    if (this._deregisterUiCanExitHook) this._deregisterUiCanExitHook();\n    if (this._deregisterUiOnParamsChangedHook) this._deregisterUiOnParamsChangedHook();\n    this._deregisterUIView = this._deregisterUiCanExitHook = this._deregisterUiOnParamsChangedHook = null;\n    this._disposeLast();\n  }\n\n  /**\n   * The view service is informing us of an updated ViewConfig\n   * (usually because a transition activated some state and its views)\n   */\n  _viewConfigUpdated(config: ViewConfig) {\n    // The config may be undefined if there is nothing currently targeting this UIView.\n    // Dispose the current component, if there is one\n    if (!config) return this._disposeLast();\n\n    // Only care about Ng2 configs\n    if (!(config instanceof Ng2ViewConfig)) return;\n\n    // The \"new\" viewconfig is already applied, so exit early\n    if (this._uiViewData.config === config) return;\n\n    // This is a new ViewConfig.  Dispose the previous component\n    this._disposeLast();\n    trace.traceUIViewConfigUpdated(this._uiViewData, config && config.viewDecl.$context);\n\n    this._applyUpdatedConfig(config);\n\n    // Initiate change detection for the newly created component\n    this._componentRef.changeDetectorRef.markForCheck();\n  }\n\n  private _applyUpdatedConfig(config: Ng2ViewConfig) {\n    this._uiViewData.config = config;\n    // Create the Injector for the routed component\n    const context = new ResolveContext(config.path);\n    const componentInjector = this._getComponentInjector(context);\n\n    // Get the component class from the view declaration. TODO: allow promises?\n    const componentClass = config.viewDecl.component;\n\n    // Create the component\n    const compFactoryResolver = componentInjector.get(ComponentFactoryResolver);\n    const compFactory = compFactoryResolver.resolveComponentFactory(componentClass);\n    this._componentRef = this._componentTarget.createComponent(compFactory, undefined, componentInjector);\n\n    // Wire resolves to @Input()s\n    this._applyInputBindings(compFactory, this._componentRef.instance, context, componentClass);\n  }\n\n  /**\n   * Creates a new Injector for a routed component.\n   *\n   * Adds resolve values to the Injector\n   * Adds providers from the NgModule for the state\n   * Adds providers from the parent Component in the component tree\n   * Adds a PARENT_INJECT view context object\n   *\n   * @returns an Injector\n   */\n  private _getComponentInjector(context: ResolveContext): Injector {\n    // Map resolves to \"useValue: providers\"\n    const resolvables = context\n      .getTokens()\n      .map(token => context.getResolvable(token))\n      .filter(r => r.resolved);\n\n    const newProviders = resolvables.map(r => ({ provide: r.token, useValue: context.injector().get(r.token) }));\n\n    const parentInject = { context: this._uiViewData.config.viewDecl.$context, fqn: this._uiViewData.fqn };\n    newProviders.push({ provide: UIView.PARENT_INJECT, useValue: parentInject });\n\n    const parentComponentInjector = this.viewContainerRef.injector;\n    const moduleInjector = context.getResolvable(NATIVE_INJECTOR_TOKEN).data;\n    const mergedParentInjector = new MergeInjector(moduleInjector, parentComponentInjector);\n\n    return ReflectiveInjector.resolveAndCreate(newProviders, mergedParentInjector);\n  }\n\n  /**\n   * Supplies component inputs with resolve data\n   *\n   * Finds component inputs which match resolves (by name) and sets the input value\n   * to the resolve data.\n   */\n  private _applyInputBindings(factory: ComponentFactory<any>, component: any, context: ResolveContext, componentClass) {\n    const bindings = this._uiViewData.config.viewDecl['bindings'] || {};\n    const explicitBoundProps = Object.keys(bindings);\n\n    // Returns the actual component property for a renamed an input renamed using `@Input('foo') _foo`.\n    // return the `_foo` property\n    const renamedInputProp = (prop: string) => {\n      const input = factory.inputs.find(i => i.templateName === prop);\n      return (input && input.propName) || prop;\n    };\n\n    // Supply resolve data to component as specified in the state's `bindings: {}`\n    const explicitInputTuples = explicitBoundProps.reduce(\n      (acc, key) => acc.concat([{ prop: renamedInputProp(key), token: bindings[key] }]),\n      []\n    );\n\n    // Supply resolve data to matching @Input('prop') or inputs: ['prop']\n    const implicitInputTuples = ng2ComponentInputs(factory).filter(tuple => !inArray(explicitBoundProps, tuple.prop));\n\n    const addResolvable = (tuple: InputMapping) => ({\n      prop: tuple.prop,\n      resolvable: context.getResolvable(tuple.token),\n    });\n\n    const injector = context.injector();\n\n    explicitInputTuples\n      .concat(implicitInputTuples)\n      .map(addResolvable)\n      .filter(tuple => tuple.resolvable && tuple.resolvable.resolved)\n      .forEach(tuple => {\n        component[tuple.prop] = injector.get(tuple.resolvable.token);\n      });\n  }\n}\n",
    "/** @module ng2 */ /** */\nimport { UIRouter, isFunction, StateObject } from '@uirouter/core';\nimport { StatesModule, RootModule } from './uiRouterNgModule';\nimport { Injector } from '@angular/core';\nimport { isDefined } from '@uirouter/core';\n\nexport function applyModuleConfig(uiRouter: UIRouter, injector: Injector, module: StatesModule = {}): StateObject[] {\n  if (isFunction(module.config)) {\n    module.config(uiRouter, injector, module);\n  }\n\n  const states = module.states || [];\n  return states.map(state => uiRouter.stateRegistry.register(state));\n}\n\nexport function applyRootModuleConfig(uiRouter: UIRouter, injector: Injector, module: RootModule) {\n  isDefined(module.deferIntercept) && uiRouter.urlService.deferIntercept(module.deferIntercept);\n  isDefined(module.otherwise) && uiRouter.urlService.rules.otherwise(module.otherwise);\n  isDefined(module.initial) && uiRouter.urlService.rules.initial(module.initial);\n}\n",
    "/** @ng2api @module directives */\n/** */\nimport { UIRouter, extend, Obj, TransitionOptions, TargetState, isNumber } from '@uirouter/core';\nimport {\n  Directive,\n  Inject,\n  Input,\n  Optional,\n  ElementRef,\n  Renderer2,\n  OnChanges,\n  SimpleChanges,\n  HostListener,\n} from '@angular/core';\nimport { UIView, ParentUIViewInject } from './uiView';\nimport { ReplaySubject, Subscription } from 'rxjs';\n\n/**\n * @internalapi\n * # blah blah blah\n */\n@Directive({ selector: 'a[uiSref]' })\nexport class AnchorUISref {\n  constructor(public _el: ElementRef, public _renderer: Renderer2) {}\n  openInNewTab() {\n    return this._el.nativeElement.target === '_blank';\n  }\n  update(href: string) {\n    if (href && href !== '') {\n      this._renderer.setProperty(this._el.nativeElement, 'href', href);\n    } else {\n      this._renderer.removeAttribute(this._el.nativeElement, 'href');\n    }\n  }\n}\n\n/**\n * A directive when clicked, initiates a [[Transition]] to a [[TargetState]].\n *\n * ### Purpose\n *\n * This directive is applied to anchor tags (`<a>`) or any other clickable element.  It is a state reference (or sref --\n * similar to an href).  When clicked, the directive will transition to that state by calling [[StateService.go]],\n * and optionally supply state parameter values and transition options.\n *\n * When this directive is on an anchor tag, it will also add an `href` attribute to the anchor.\n *\n * ### Selector\n *\n * - `[uiSref]`: The directive is created as an attribute on an element, e.g., `<a uiSref></a>`\n *\n * ### Inputs\n *\n * - `uiSref`: the target state's name, e.g., `uiSref=\"foostate\"`.  If a component template uses a relative `uiSref`,\n * e.g., `uiSref=\".child\"`, the reference is relative to that component's state.\n *\n * - `uiParams`: any target state parameter values, as an object, e.g., `[uiParams]=\"{ fooId: bar.fooId }\"`\n *\n * - `uiOptions`: [[TransitionOptions]], e.g., `[uiOptions]=\"{ inherit: false }\"`\n *\n * @example\n * ```html\n *\n * <!-- Targets bar state' -->\n * <a uiSref=\"bar\">Bar</a>\n *\n * <!-- Assume this component's state is \"foo\".\n *      Relatively targets \"foo.child\" -->\n * <a uiSref=\".child\">Foo Child</a>\n *\n * <!-- Targets \"bar\" state and supplies parameter value -->\n * <a uiSref=\"bar\" [uiParams]=\"{ barId: foo.barId }\">Bar {{foo.barId}}</a>\n *\n * <!-- Targets \"bar\" state and parameter, doesn't inherit existing parameters-->\n * <a uiSref=\"bar\" [uiParams]=\"{ barId: foo.barId }\" [uiOptions]=\"{ inherit: false }\">Bar {{foo.barId}}</a>\n * ```\n */\n@Directive({\n  selector: '[uiSref]',\n  exportAs: 'uiSref',\n})\nexport class UISref implements OnChanges {\n  /**\n   * `@Input('uiSref')` The name of the state to link to\n   *\n   * ```html\n   * <a uiSref=\"hoome\">Home</a>\n   * ```\n   */\n  @Input('uiSref') state: string;\n\n  /**\n   * `@Input('uiParams')` The parameter values to use (as key/values)\n   *\n   * ```html\n   * <a uiSref=\"book\" [uiParams]=\"{ bookId: book.id }\">Book {{ book.name }}</a>\n   * ```\n   */\n  @Input('uiParams') params: any;\n\n  /**\n   * `@Input('uiOptions')` The transition options\n   *\n   * ```html\n   * <a uiSref=\"books\" [uiOptions]=\"{ reload: true }\">Book {{ book.name }}</a>\n   * ```\n   */\n  @Input('uiOptions') options: TransitionOptions;\n\n  /**\n   * An observable (ReplaySubject) of the state this UISref is targeting.\n   * When the UISref is clicked, it will transition to this [[TargetState]].\n   */\n  public targetState$ = new ReplaySubject<TargetState>(1);\n\n  /** @internalapi */ private _emit = false;\n  /** @internalapi */ private _statesSub: Subscription;\n  /** @internalapi */ private _router: UIRouter;\n  /** @internalapi */ private _anchorUISref: AnchorUISref;\n  /** @internalapi */ private _parent: ParentUIViewInject;\n\n  constructor(\n    _router: UIRouter,\n    @Optional() _anchorUISref: AnchorUISref,\n    @Inject(UIView.PARENT_INJECT) parent: ParentUIViewInject\n  ) {\n    this._router = _router;\n    this._anchorUISref = _anchorUISref;\n    this._parent = parent;\n\n    this._statesSub = _router.globals.states$.subscribe(() => this.update());\n  }\n\n  /** @internalapi */\n  set uiSref(val: string) {\n    this.state = val;\n    this.update();\n  }\n  /** @internalapi */\n  set uiParams(val: Obj) {\n    this.params = val;\n    this.update();\n  }\n  /** @internalapi */\n  set uiOptions(val: TransitionOptions) {\n    this.options = val;\n    this.update();\n  }\n\n  ngOnInit() {\n    this._emit = true;\n    this.update();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  ngOnDestroy() {\n    this._emit = false;\n    this._statesSub.unsubscribe();\n    this.targetState$.unsubscribe();\n  }\n\n  private update() {\n    const $state = this._router.stateService;\n    if (this._emit) {\n      const newTarget = $state.target(this.state, this.params, this.getOptions());\n      this.targetState$.next(newTarget);\n    }\n\n    if (this._anchorUISref) {\n      const href = $state.href(this.state, this.params, this.getOptions());\n      this._anchorUISref.update(href);\n    }\n  }\n\n  getOptions() {\n    const defaultOpts: TransitionOptions = {\n      relative: this._parent && this._parent.context && this._parent.context.name,\n      inherit: true,\n      source: 'sref',\n    };\n    return extend(defaultOpts, this.options || {});\n  }\n\n  /** When triggered by a (click) event, this function transitions to the UISref's target state */\n  @HostListener('click', ['$event.button', '$event.ctrlKey', '$event.metaKey'])\n  go(button: number, ctrlKey: boolean, metaKey: boolean) {\n    if (\n      (this._anchorUISref &&\n        (this._anchorUISref.openInNewTab() || button || !isNumber(button) || ctrlKey || metaKey)) ||\n      !this.state\n    ) {\n      return;\n    }\n\n    this._router.stateService.go(this.state, this.params, this.getOptions());\n    return false;\n  }\n}\n",
    "/** @ng2api @module directives */\n/** */\nimport { Directive, Output, EventEmitter, ContentChildren, QueryList } from '@angular/core';\nimport { UISref } from './uiSref';\nimport {\n  PathNode,\n  Transition,\n  TargetState,\n  StateObject,\n  anyTrueR,\n  tail,\n  unnestR,\n  Predicate,\n  UIRouterGlobals,\n  Param,\n  PathUtils,\n} from '@uirouter/core';\n\nimport { Subscription, Observable, BehaviorSubject, of, from, combineLatest, concat } from 'rxjs';\nimport { switchMap, map } from 'rxjs/operators';\n\n/** @internalapi */\ninterface TransEvt {\n  evt: string;\n  trans: Transition;\n}\n\n/**\n * UISref status emitted from [[UISrefStatus]]\n */\nexport interface SrefStatus {\n  /** The sref's target state (or one of its children) is currently active */\n  active: boolean;\n  /** The sref's target state is currently active */\n  exact: boolean;\n  /** A transition is entering the sref's target state */\n  entering: boolean;\n  /** A transition is exiting the sref's target state */\n  exiting: boolean;\n  /** The enclosed sref(s) target state(s) */\n  targetStates: TargetState[];\n}\n\n/** @internalapi */\nconst inactiveStatus: SrefStatus = {\n  active: false,\n  exact: false,\n  entering: false,\n  exiting: false,\n  targetStates: [],\n};\n\n/**\n * Returns a Predicate<PathNode[]>\n *\n * The predicate returns true when the target state (and param values)\n * match the (tail of) the path, and the path's param values\n *\n * @internalapi\n */\nconst pathMatches = (target: TargetState): Predicate<PathNode[]> => {\n  if (!target.exists()) return () => false;\n  const state: StateObject = target.$state();\n  const targetParamVals = target.params();\n  const targetPath: PathNode[] = PathUtils.buildPath(target);\n  const paramSchema: Param[] = targetPath\n    .map(node => node.paramSchema)\n    .reduce(unnestR, [])\n    .filter((param: Param) => targetParamVals.hasOwnProperty(param.id));\n\n  return (path: PathNode[]) => {\n    const tailNode = tail(path);\n    if (!tailNode || tailNode.state !== state) return false;\n    const paramValues = PathUtils.paramValues(path);\n    return Param.equals(paramSchema, paramValues, targetParamVals);\n  };\n};\n\n/**\n * Given basePath: [a, b], appendPath: [c, d]),\n * Expands the path to [c], [c, d]\n * Then appends each to [a,b,] and returns: [a, b, c], [a, b, c, d]\n *\n * @internalapi\n */\nfunction spreadToSubPaths(basePath: PathNode[], appendPath: PathNode[]): PathNode[][] {\n  return appendPath.map(node => basePath.concat(PathUtils.subPath(appendPath, n => n.state === node.state)));\n}\n\n/**\n * Given a TransEvt (Transition event: started, success, error)\n * and a UISref Target State, return a SrefStatus object\n * which represents the current status of that Sref:\n * active, activeEq (exact match), entering, exiting\n *\n * @internalapi\n */\nfunction getSrefStatus(event: TransEvt, srefTarget: TargetState): SrefStatus {\n  const pathMatchesTarget = pathMatches(srefTarget);\n  const tc = event.trans.treeChanges();\n\n  const isStartEvent = event.evt === 'start';\n  const isSuccessEvent = event.evt === 'success';\n  const activePath: PathNode[] = isSuccessEvent ? tc.to : tc.from;\n\n  const isActive = () =>\n    spreadToSubPaths([], activePath)\n      .map(pathMatchesTarget)\n      .reduce(anyTrueR, false);\n\n  const isExact = () => pathMatchesTarget(activePath);\n\n  const isEntering = () =>\n    spreadToSubPaths(tc.retained, tc.entering)\n      .map(pathMatchesTarget)\n      .reduce(anyTrueR, false);\n\n  const isExiting = () =>\n    spreadToSubPaths(tc.retained, tc.exiting)\n      .map(pathMatchesTarget)\n      .reduce(anyTrueR, false);\n\n  return {\n    active: isActive(),\n    exact: isExact(),\n    entering: isStartEvent ? isEntering() : false,\n    exiting: isStartEvent ? isExiting() : false,\n    targetStates: [srefTarget],\n  } as SrefStatus;\n}\n\n/** @internalapi */\nfunction mergeSrefStatus(left: SrefStatus, right: SrefStatus): SrefStatus {\n  return {\n    active: left.active || right.active,\n    exact: left.exact || right.exact,\n    entering: left.entering || right.entering,\n    exiting: left.exiting || right.exiting,\n    targetStates: left.targetStates.concat(right.targetStates),\n  };\n}\n\n/**\n * A directive which emits events when a paired [[UISref]] status changes.\n *\n * This directive is primarily used by the [[UISrefActive]] directives to monitor `UISref`(s).\n *\n * This directive shares two attribute selectors with `UISrefActive`:\n *\n * - `[uiSrefActive]`\n * - `[uiSrefActiveEq]`.\n *\n * Thus, whenever a `UISrefActive` directive is created, a `UISrefStatus` directive is also created.\n *\n * Most apps should simply use `UISrefActive`, but some advanced components may want to process the\n * [[SrefStatus]] events directly.\n *\n * ```js\n * <li (uiSrefStatus)=\"onSrefStatusChanged($event)\">\n *   <a uiSref=\"book\" [uiParams]=\"{ bookId: book.id }\">Book {{ book.name }}</a>\n * </li>\n * ```\n *\n * The `uiSrefStatus` event is emitted whenever an enclosed `uiSref`'s status changes.\n * The event emitted is of type [[SrefStatus]], and has boolean values for `active`, `exact`, `entering`, and `exiting`; also has a [[StateOrName]] `identifier`value.\n *\n * The values from this event can be captured and stored on a component (then applied, e.g., using ngClass).\n *\n * ---\n *\n * A single `uiSrefStatus` can enclose multiple `uiSref`.\n * Each status boolean (`active`, `exact`, `entering`, `exiting`) will be true if *any of the enclosed `uiSref` status is true*.\n * In other words, all enclosed `uiSref` statuses  are merged to a single status using `||` (logical or).\n *\n * ```js\n * <li (uiSrefStatus)=\"onSrefStatus($event)\" uiSref=\"admin\">\n *   Home\n *   <ul>\n *     <li> <a uiSref=\"admin.users\">Users</a> </li>\n *     <li> <a uiSref=\"admin.groups\">Groups</a> </li>\n *   </ul>\n * </li>\n * ```\n *\n * In the above example, `$event.active === true` when either `admin.users` or `admin.groups` is active.\n *\n * ---\n *\n * This API is subject to change.\n */\n@Directive({\n  selector: '[uiSrefStatus],[uiSrefActive],[uiSrefActiveEq]',\n  exportAs: 'uiSrefStatus',\n})\nexport class UISrefStatus {\n  /** current statuses of the state/params the uiSref directive is linking to */\n  @Output('uiSrefStatus') uiSrefStatus = new EventEmitter<SrefStatus>(false);\n  /** Monitor all child components for UISref(s) */\n  @ContentChildren(UISref, { descendants: true })\n  private _srefs: QueryList<UISref>;\n\n  /** The current status */\n  status: SrefStatus;\n\n  /** @internalapi */ private _subscription: Subscription;\n  /** @internalapi */ private _srefChangesSub: Subscription;\n  /** @internalapi */ private _srefs$: BehaviorSubject<UISref[]>;\n  /** @internalapi */ private _globals: UIRouterGlobals;\n  constructor(_globals: UIRouterGlobals) {\n    this._globals = _globals;\n    this.status = Object.assign({}, inactiveStatus);\n  }\n\n  ngAfterContentInit() {\n    // Map each transition start event to a stream of:\n    // start -> (success|error)\n    const transEvents$: Observable<TransEvt> = this._globals.start$.pipe(\n      switchMap((trans: Transition) => {\n        const event = (evt: string) => ({ evt, trans } as TransEvt);\n\n        const transStart$ = of(event('start'));\n        const transResult = trans.promise.then(() => event('success'), () => event('error'));\n        const transFinish$ = from(transResult);\n\n        return concat(transStart$, transFinish$);\n      })\n    );\n\n    // Watch the @ContentChildren UISref[] components and get their target states\n\n    // let srefs$: Observable<UISref[]> = of(this.srefs.toArray()).concat(this.srefs.changes);\n    this._srefs$ = new BehaviorSubject(this._srefs.toArray());\n    this._srefChangesSub = this._srefs.changes.subscribe(srefs => this._srefs$.next(srefs));\n\n    const targetStates$: Observable<TargetState[]> = this._srefs$.pipe(\n      switchMap((srefs: UISref[]) => combineLatest<TargetState>(srefs.map(sref => sref.targetState$)))\n    );\n\n    // Calculate the status of each UISref based on the transition event.\n    // Reduce the statuses (if multiple) by or-ing each flag.\n    this._subscription = transEvents$\n      .pipe(\n        switchMap((evt: TransEvt) => {\n          return targetStates$.pipe(\n            map((targets: TargetState[]) => {\n              const statuses: SrefStatus[] = targets.map(target => getSrefStatus(evt, target));\n              return statuses.reduce(mergeSrefStatus);\n            })\n          );\n        })\n      )\n      .subscribe(this._setStatus.bind(this));\n  }\n\n  ngOnDestroy() {\n    if (this._subscription) this._subscription.unsubscribe();\n    if (this._srefChangesSub) this._srefChangesSub.unsubscribe();\n    if (this._srefs$) this._srefs$.unsubscribe();\n    this._subscription = this._srefChangesSub = this._srefs$ = undefined;\n  }\n\n  private _setStatus(status: SrefStatus) {\n    this.status = status;\n    this.uiSrefStatus.emit(status);\n  }\n}\n",
    "/** @ng2api @module directives */ /** */\nimport { Directive, Input, ElementRef, Host, Renderer2 } from '@angular/core';\nimport { UISrefStatus, SrefStatus } from './uiSrefStatus';\nimport { Subscription } from 'rxjs';\n\n/**\n * A directive that adds a CSS class when its associated `uiSref` link is active.\n *\n * ### Purpose\n *\n * This directive should be paired with one (or more) [[UISref]] directives.\n * It will apply a CSS class to its element when the state the `uiSref` targets is activated.\n *\n * This can be used to create navigation UI where the active link is highlighted.\n *\n * ### Selectors\n *\n * - `[uiSrefActive]`: When this selector is used, the class is added when the target state or any\n * child of the target state is active\n * - `[uiSrefActiveEq]`: When this selector is used, the class is added when the target state is\n * exactly active (the class is not added if a child of the target state is active).\n *\n * ### Inputs\n *\n * - `uiSrefActive`/`uiSrefActiveEq`: one or more CSS classes to add to the element, when the `uiSref` is active\n *\n * #### Example:\n * The anchor tag has the `active` class added when the `foo` state is active.\n * ```html\n * <a uiSref=\"foo\" uiSrefActive=\"active\">Foo</a>\n * ```\n *\n * ### Matching parameters\n *\n * If the `uiSref` includes parameters, the current state must be active, *and* the parameter values must match.\n *\n * #### Example:\n * The first anchor tag has the `active` class added when the `foo.bar` state is active and the `id` parameter\n * equals 25.\n * The second anchor tag has the `active` class added when the `foo.bar` state is active and the `id` parameter\n * equals 32.\n * ```html\n * <a uiSref=\"foo.bar\" [uiParams]=\"{ id: 25 }\" uiSrefActive=\"active\">Bar #25</a>\n * <a uiSref=\"foo.bar\" [uiParams]=\"{ id: 32 }\" uiSrefActive=\"active\">Bar #32</a>\n * ```\n *\n * #### Example:\n * A list of anchor tags are created for a list of `bar` objects.\n * An anchor tag will have the `active` class when `foo.bar` state is active and the `id` parameter matches\n * that object's `id`.\n * ```html\n * <li *ngFor=\"let bar of bars\">\n *   <a uiSref=\"foo.bar\" [uiParams]=\"{ id: bar.id }\" uiSrefActive=\"active\">Bar #{{ bar.id }}</a>\n * </li>\n * ```\n *\n * ### Multiple uiSrefs\n *\n * A single `uiSrefActive` can be used for multiple `uiSref` links.\n * This can be used to create (for example) a drop down navigation menu, where the menui is highlighted\n * if *any* of its inner links are active.\n *\n * The `uiSrefActive` should be placed on an ancestor element of the `uiSref` list.\n * If anyof the `uiSref` links are activated, the class will be added to the ancestor element.\n *\n * #### Example:\n * This is a dropdown nagivation menu for \"Admin\" states.\n * When any of `admin.users`, `admin.groups`, `admin.settings` are active, the `<li>` for the dropdown\n * has the `dropdown-child-active` class applied.\n * Additionally, the active anchor tag has the `active` class applied.\n * ```html\n * <ul class=\"dropdown-menu\">\n *   <li uiSrefActive=\"dropdown-child-active\" class=\"dropdown admin\">\n *     Admin\n *     <ul>\n *       <li><a uiSref=\"admin.users\" uiSrefActive=\"active\">Users</a></li>\n *       <li><a uiSref=\"admin.groups\" uiSrefActive=\"active\">Groups</a></li>\n *       <li><a uiSref=\"admin.settings\" uiSrefActive=\"active\">Settings</a></li>\n *     </ul>\n *   </li>\n * </ul>\n * ```\n */\n@Directive({\n  selector: '[uiSrefActive],[uiSrefActiveEq]',\n})\nexport class UISrefActive {\n  private _classes: string[] = [];\n  @Input('uiSrefActive')\n  set active(val: string) {\n    this._classes = val.split(/\\s+/);\n  }\n\n  private _classesEq: string[] = [];\n  @Input('uiSrefActiveEq')\n  set activeEq(val: string) {\n    this._classesEq = val.split(/\\s+/);\n  }\n\n  private _subscription: Subscription;\n  constructor(uiSrefStatus: UISrefStatus, rnd: Renderer2, @Host() host: ElementRef) {\n    this._subscription = uiSrefStatus.uiSrefStatus.subscribe((next: SrefStatus) => {\n      this._classes.forEach(cls => {\n        if (next.active) {\n          rnd.addClass(host.nativeElement, cls);\n        } else {\n          rnd.removeClass(host.nativeElement, cls);\n        }\n      });\n      this._classesEq.forEach(cls => {\n        if (next.exact) {\n          rnd.addClass(host.nativeElement, cls);\n        } else {\n          rnd.removeClass(host.nativeElement, cls);\n        }\n      });\n    });\n  }\n\n  ngOnDestroy() {\n    this._subscription.unsubscribe();\n  }\n}\n",
    "/**\n * The UI-Router for Angular directives:\n *\n * - [[UIView]]: A viewport for routed components\n * - [[UISref]]: A state ref to a target state; navigates when clicked\n * - [[UISrefActive]]: (and `UISrefActiveEq`) Adds a css class when a UISref's target state (or a child state) is active\n *\n * @ng2api\n * @preferred\n * @module directives\n */ /** */\nimport { UISref, AnchorUISref } from './uiSref';\nimport { UISrefActive } from './uiSrefActive';\nimport { UIView } from './uiView';\nimport { UISrefStatus } from './uiSrefStatus';\n\nexport * from './uiView';\nexport * from './uiSref';\nexport * from './uiSrefStatus';\nexport * from './uiSrefActive';\n\n/** @internalapi */\nexport const _UIROUTER_DIRECTIVES = [UISref, AnchorUISref, UIView, UISrefActive, UISrefStatus];\n\n/**\n * References to the UI-Router directive classes, for use within a @Component's `directives:` property\n * @deprecated use [[UIRouterModule]]\n * @internalapi\n */\nexport const UIROUTER_DIRECTIVES = _UIROUTER_DIRECTIVES;\n",
    "/** @ng2api @module core */\n/** */\nimport { Ng2StateDeclaration } from './interface';\nimport {\n  NgModule,\n  ModuleWithProviders,\n  ANALYZE_FOR_ENTRY_COMPONENTS,\n  Provider,\n  Injector,\n  InjectionToken,\n  APP_INITIALIZER,\n  PLATFORM_ID,\n} from '@angular/core';\nimport {\n  CommonModule,\n  LocationStrategy,\n  HashLocationStrategy,\n  PathLocationStrategy,\n  isPlatformServer,\n} from '@angular/common';\nimport { _UIROUTER_DIRECTIVES } from './directives/directives';\nimport { UIView } from './directives/uiView';\nimport { UrlRuleHandlerFn, TargetState, TargetStateDef, UIRouter, TransitionService } from '@uirouter/core';\nimport { _UIROUTER_INSTANCE_PROVIDERS, _UIROUTER_SERVICE_PROVIDERS } from './providers';\n\nimport { ROUTES } from '@angular/router';\n/** @hidden */ export const UIROUTER_ROOT_MODULE = new InjectionToken('UIRouter Root Module');\n/** @hidden */ export const UIROUTER_MODULE_TOKEN = new InjectionToken('UIRouter Module');\n/** @hidden */ export const UIROUTER_STATES = new InjectionToken('UIRouter States');\n// /** @hidden */ export const ROUTES = UIROUTER_STATES;\n\n// Delay angular bootstrap until first transition is successful, for SSR.\n// See https://github.com/ui-router/angular/pull/127\nexport function onTransitionReady(transitionService: TransitionService, root: RootModule[]) {\n  const mod = root[0];\n  if (!mod || !mod.deferInitialRender) {\n    return () => Promise.resolve();\n  }\n\n  return () =>\n    new Promise(resolve => {\n      const hook = trans => {\n        trans.promise.then(resolve, resolve);\n      };\n      transitionService.onStart({}, hook, { invokeLimit: 1 });\n    });\n}\n\nexport function makeRootProviders(module: RootModule): Provider[] {\n  return [\n    { provide: UIROUTER_ROOT_MODULE, useValue: module, multi: true },\n    { provide: UIROUTER_MODULE_TOKEN, useValue: module, multi: true },\n    { provide: ROUTES, useValue: module.states || [], multi: true },\n    { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: module.states || [], multi: true },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: onTransitionReady,\n      deps: [TransitionService, UIROUTER_ROOT_MODULE],\n      multi: true,\n    },\n  ];\n}\n\nexport function makeChildProviders(module: StatesModule): Provider[] {\n  return [\n    { provide: UIROUTER_MODULE_TOKEN, useValue: module, multi: true },\n    { provide: ROUTES, useValue: module.states || [], multi: true },\n    { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: module.states || [], multi: true },\n  ];\n}\n\nexport function locationStrategy(useHash) {\n  return { provide: LocationStrategy, useClass: useHash ? HashLocationStrategy : PathLocationStrategy };\n}\n\n/**\n * Creates UI-Router Modules\n *\n * This class has two static factory methods which create UIRouter Modules.\n * A UI-Router Module is an [Angular NgModule](https://angular.io/docs/ts/latest/guide/ngmodule.html)\n * with support for UI-Router.\n *\n * ### UIRouter Directives\n *\n * When a UI-Router Module is imported into a `NgModule`, that module's components\n * can use the UIRouter Directives such as [[UIView]], [[UISref]], [[UISrefActive]].\n *\n * ### State Definitions\n *\n * State definitions found in the `states:` property are provided to the Dependency Injector.\n * This enables UI-Router to automatically register the states with the [[StateRegistry]] at bootstrap (and during lazy load).\n *\n * ### Entry Components\n *\n * Any routed components are added as `entryComponents:` so they will get compiled.\n */\n@NgModule({\n  imports: [CommonModule],\n  declarations: [_UIROUTER_DIRECTIVES],\n  exports: [_UIROUTER_DIRECTIVES],\n  entryComponents: [UIView],\n})\nexport class UIRouterModule {\n  /**\n   * Creates a UI-Router Module for the root (bootstrapped) application module to import\n   *\n   * This factory function creates an [Angular NgModule](https://angular.io/docs/ts/latest/guide/ngmodule.html)\n   * with UI-Router support.\n   *\n   * The `forRoot` module should be added to the `imports:` of the `NgModule` being bootstrapped.\n   * An application should only create and import a single `NgModule` using `forRoot()`.\n   * All other modules should be created using [[UIRouterModule.forChild]].\n   *\n   * Unlike `forChild`, an `NgModule` returned by this factory provides the [[UIRouter]] singleton object.\n   * This factory also accepts root-level router configuration.\n   * These are the only differences between `forRoot` and `forChild`.\n   *\n   * Example:\n   * ```js\n   * let routerConfig = {\n   *   otherwise: '/home',\n   *   states: [homeState, aboutState]\n   * };\n   *\n   * @ NgModule({\n   *   imports: [\n   *     BrowserModule,\n   *     UIRouterModule.forRoot(routerConfig),\n   *     FeatureModule1\n   *   ]\n   * })\n   * class MyRootAppModule {}\n   *\n   * browserPlatformDynamic.bootstrapModule(MyRootAppModule);\n   * ```\n   *\n   * @param config declarative UI-Router configuration\n   * @returns an `NgModule` which provides the [[UIRouter]] singleton instance\n   */\n  static forRoot(config: RootModule = {}): ModuleWithProviders {\n    return {\n      ngModule: UIRouterModule,\n      providers: [\n        _UIROUTER_INSTANCE_PROVIDERS,\n        _UIROUTER_SERVICE_PROVIDERS,\n        locationStrategy(config.useHash),\n        ...makeRootProviders(config),\n      ],\n    };\n  }\n\n  /**\n   * Creates an `NgModule` for a UIRouter module\n   *\n   * This function creates an [Angular NgModule](https://angular.io/docs/ts/latest/guide/ngmodule.html)\n   * with UI-Router support.\n   *\n   * #### Example:\n   * ```js\n   * var homeState = { name: 'home', url: '/home', component: Home };\n   * var aboutState = { name: 'about', url: '/about', component: About };\n   *\n   * @ NgModule({\n   *   imports: [\n   *     UIRouterModule.forChild({ states: [ homeState, aboutState ] }),\n   *     SharedModule,\n   *   ],\n   *   declarations: [ Home, About ],\n   * })\n   * export class AppModule {};\n   * ```\n   *\n   * @param module UI-Router module options\n   * @returns an `NgModule`\n   */\n  static forChild(module: StatesModule = {}): ModuleWithProviders {\n    return {\n      ngModule: UIRouterModule,\n      providers: makeChildProviders(module),\n    };\n  }\n}\n\n/**\n * UI-Router declarative configuration which can be provided to [[UIRouterModule.forRoot]]\n */\nexport interface RootModule extends StatesModule {\n  /**\n   * Chooses a `LocationStrategy`.\n   *\n   * The location strategy enables either HTML5 Push State\n   * (Requires server-side support) or \"HashBang\" URLs.\n   *\n   * When `false`, uses [`PathLocationStrategy`](https://angular.io/docs/ts/latest/api/common/index/PathLocationStrategy-class.html)\n   * When `true`, uses [`HashLocationStrategy`](https://angular.io/docs/ts/latest/api/common/index/HashLocationStrategy-class.html)\n   *\n   * Defaults to `false`\n   */\n  useHash?: boolean;\n\n  /**\n   * Configures the `otherwise` rule, which chooses the state or URL to activate when no other routes matched.\n   *\n   * See: [[UrlRulesApi.otherwise]].\n   */\n  otherwise?: string | UrlRuleHandlerFn | TargetState | TargetStateDef;\n\n  /**\n   * Configures the `initial` rule, which chooses the state or URL to activate when the\n   * application initially starts, and no other routes matched.\n   *\n   * See: [[UrlRulesApi.initial]].\n   */\n  initial?: string | UrlRuleHandlerFn | TargetState | TargetStateDef;\n\n  /**\n   * Sets [[UrlRouterProvider.deferIntercept]]\n   */\n  deferIntercept?: boolean;\n\n  /**\n   * Tells Angular to defer the first render until after the initial transition is complete.\n   *\n   * When `true`, adds an async `APP_INITIALIZER` which is resolved after any `onSuccess` or `onError`.\n   * The initializer stops angular from rendering the root component until after the first transition completes.\n   * This may prevent initial page flicker while the state is being loaded.\n   *\n   * Defaults to `false`\n   */\n  deferInitialRender?: boolean;\n}\n\n/**\n * UI-Router Module declarative configuration which can be passed to [[UIRouterModule.forChild]]\n */\nexport interface StatesModule {\n  /**\n   * The module's UI-Router states\n   *\n   * This list of [[Ng2StateDeclaration]] objects will be registered with the [[StateRegistry]].\n   * Also, the components that the states route to will be added to `entryComponents` so they will be compiled.\n   */\n  states?: Ng2StateDeclaration[];\n\n  /**\n   * A UI-Router Module's imperative configuration\n   *\n   * If a UI-Router Module needs to perform some configuration (such as registering\n   * parameter types or Transition Hooks) a `configFn` should be supplied.\n   * The function will be passed the `UIRouter` instance, the module's `Injector`,\n   * and the module object.\n   *\n   * #### Example:\n   * ```js\n   * import { Injector } from \"@angular/core\";\n   * import { UIRouter } from \"@uirouter/angular\";\n   * import { requireAuthHook } from \"./requireAuthHook\";\n   * import { MyService } from \"./myService\";\n   *\n   * export function configureMyModule(uiRouter: UIRouter, injector: Injector, module: StatesModule) {\n   *   // Get UIRouter services off the UIRouter object\n   *   let urlConfig = uiRouter.urlService.config;\n   *   let transitionService = uiRouter.transitionService;\n   *   uiRouter.trace.enable(\"TRANSITION\");\n   *\n   *   transitionService.onBefore({ to: (state) => state.requiresAuth }, requireAuthHook);\n   *\n   *   // Create a slug type based on the string type\n   *   let builtInStringType = urlConfig.type('string');\n   *   let slugType = Object.assign({}, builtInStringType, { encode: (str) => str, decode: (str) => str });\n   *   urlConfig.type('slug', slugType);\n   *\n   *   // Inject arbitrary services from DI using the Injector argument\n   *   let myService: MyService = injector.get(MyService)\n   *   myService.useFastMode();\n   * }\n   * ```\n   *\n   * ```js\n   * @NgModule({\n   *   imports: [\n   *     UIRouterModule.forChild({ states: STATES, config: configureMyModule });\n   *   ]\n   * })\n   * class MyModule {}\n   * ```\n   */\n  config?: (uiRouterInstance: UIRouter, injector: Injector, module: StatesModule) => any;\n}\n",
    "/** @ng2api @module core */\n/** */\nimport { NgModuleRef, Injector, NgModuleFactory, Type, Compiler, NgModuleFactoryLoader } from '@angular/core';\nimport {\n  Transition,\n  LazyLoadResult,\n  UIRouter,\n  Resolvable,\n  NATIVE_INJECTOR_TOKEN,\n  isString,\n  unnestR,\n  inArray,\n  StateObject,\n  uniqR,\n  StateDeclaration,\n} from '@uirouter/core';\nimport { RootModule, UIROUTER_ROOT_MODULE, UIROUTER_MODULE_TOKEN, StatesModule } from '../uiRouterNgModule';\nimport { applyModuleConfig } from '../uiRouterConfig';\n\n/**\n * A function that returns an NgModule, or a promise for an NgModule\n *\n * #### Example:\n * ```js\n * export function loadFooModule() {\n *   return System.import('../foo/foo.module').then(result => result.FooModule);\n * }\n * ```\n */\nexport type ModuleTypeCallback = () => Type<any> | Promise<Type<any>>;\n/**\n * A string or a function which lazy loads a module\n *\n * If a string, should conform to the Angular Router `loadChildren` string.\n * #### Example:\n * ```\n * var ngModuleToLoad = './foo/foo.module#FooModule'\n * ```\n *\n * For functions, see: [[ModuleTypeCallback]]\n */\nexport type NgModuleToLoad = string | ModuleTypeCallback;\n\n/**\n * Returns a function which lazy loads a nested module\n *\n * This is primarily used by the [[ng2LazyLoadBuilder]] when processing [[Ng2StateDeclaration.loadChildren]].\n *\n * It could also be used manually as a [[StateDeclaration.lazyLoad]] property to lazy load an `NgModule` and its state(s).\n *\n * #### Example:\n * Using `System.import()` and named export of `HomeModule`\n * ```js\n * declare var System;\n * var futureState = {\n *   name: 'home.**',\n *   url: '/home',\n *   lazyLoad: loadNgModule(() => System.import('./home/home.module').then(result => result.HomeModule))\n * }\n * ```\n *\n * #### Example:\n * Using a path (string) to the module\n * ```js\n * var futureState = {\n *   name: 'home.**',\n *   url: '/home',\n *   lazyLoad: loadNgModule('./home/home.module#HomeModule')\n * }\n * ```\n *\n *\n * @param moduleToLoad a path (string) to the NgModule to load.\n *    Or a function which loads the NgModule code which should\n *    return a reference to  the `NgModule` class being loaded (or a `Promise` for it).\n *\n * @returns A function which takes a transition, which:\n * - Gets the Injector (scoped properly for the destination state)\n * - Loads and creates the NgModule\n * - Finds the \"replacement state\" for the target state, and adds the new NgModule Injector to it (as a resolve)\n * - Returns the new states array\n */\nexport function loadNgModule(\n  moduleToLoad: NgModuleToLoad\n): (transition: Transition, stateObject: StateDeclaration) => Promise<LazyLoadResult> {\n  return (transition: Transition, stateObject: StateDeclaration) => {\n    const ng2Injector = transition.injector().get(NATIVE_INJECTOR_TOKEN);\n\n    const createModule = (factory: NgModuleFactory<any>) => factory.create(ng2Injector);\n\n    const applyModule = (moduleRef: NgModuleRef<any>) => applyNgModule(transition, moduleRef, ng2Injector, stateObject);\n\n    return loadModuleFactory(moduleToLoad, ng2Injector)\n      .then(createModule)\n      .then(applyModule);\n  };\n}\n\n/**\n * Returns the module factory that can be used to instantiate a module\n *\n * For strings this:\n * - Finds the correct NgModuleFactoryLoader\n * - Loads the new NgModuleFactory from the path string (async)\n *\n * For a Type<any> or Promise<Type<any>> this:\n * - Compiles the component type (if not running with AOT)\n * - Returns the NgModuleFactory resulting from compilation (or direct loading if using AOT) as a Promise\n *\n * @internalapi\n */\nexport function loadModuleFactory(moduleToLoad: NgModuleToLoad, ng2Injector: Injector): Promise<NgModuleFactory<any>> {\n  if (isString(moduleToLoad)) {\n    return ng2Injector.get(NgModuleFactoryLoader).load(moduleToLoad);\n  }\n\n  const compiler: Compiler = ng2Injector.get(Compiler);\n  const offlineMode = compiler instanceof Compiler;\n\n  const unwrapEsModuleDefault = x => (x && x.__esModule && x['default'] ? x['default'] : x);\n  const compileAsync = (moduleType: Type<any>) => compiler.compileModuleAsync(moduleType);\n\n  const loadChildrenPromise = Promise.resolve(moduleToLoad()).then(unwrapEsModuleDefault);\n  return offlineMode ? loadChildrenPromise : loadChildrenPromise.then(compileAsync);\n}\n\n/**\n * Apply the UI-Router Modules found in the lazy loaded module.\n *\n * Apply the Lazy Loaded NgModule's newly created Injector to the right state in the state tree.\n *\n * Lazy loading uses a placeholder state which is removed (and replaced) after the module is loaded.\n * The NgModule should include a state with the same name as the placeholder.\n *\n * Find the *newly loaded state* with the same name as the *placeholder state*.\n * The NgModule's Injector (and ComponentFactoryResolver) will be added to that state.\n * The Injector/Factory are used when creating Components for the `replacement` state and all its children.\n *\n * @internalapi\n */\nexport function applyNgModule(\n  transition: Transition,\n  ng2Module: NgModuleRef<any>,\n  parentInjector: Injector,\n  lazyLoadState: StateDeclaration\n): LazyLoadResult {\n  const injector = ng2Module.injector;\n  const uiRouter: UIRouter = injector.get(UIRouter);\n  const registry = uiRouter.stateRegistry;\n\n  const originalName = lazyLoadState.name;\n  const originalState = registry.get(originalName);\n  // Check if it's a future state (ends with .**)\n  const isFuture = /^(.*)\\.\\*\\*$/.exec(originalName);\n  // Final name (without the .**)\n  const replacementName = isFuture && isFuture[1];\n\n  const newRootModules = multiProviderParentChildDelta(parentInjector, injector, UIROUTER_ROOT_MODULE).reduce(\n    uniqR,\n    []\n  ) as RootModule[];\n  const newChildModules = multiProviderParentChildDelta(parentInjector, injector, UIROUTER_MODULE_TOKEN).reduce(\n    uniqR,\n    []\n  ) as StatesModule[];\n\n  if (newRootModules.length) {\n    console.log(newRootModules); // tslint:disable-line:no-console\n    throw new Error('Lazy loaded modules should not contain a UIRouterModule.forRoot() module');\n  }\n\n  const newStateObjects: StateObject[] = newChildModules\n    .map(module => applyModuleConfig(uiRouter, injector, module))\n    .reduce(unnestR, [])\n    .reduce(uniqR, []);\n\n  if (isFuture) {\n    const replacementState = registry.get(replacementName);\n    if (!replacementState || replacementState === originalState) {\n      throw new Error(\n        `The Future State named '${originalName}' lazy loaded an NgModule. ` +\n          `The lazy loaded NgModule must have a state named '${replacementName}' ` +\n          `which replaces the (placeholder) '${originalName}' Future State. ` +\n          `Add a '${replacementName}' state to the lazy loaded NgModule ` +\n          `using UIRouterModule.forChild({ states: CHILD_STATES }).`\n      );\n    }\n  }\n\n  // Supply the newly loaded states with the Injector from the lazy loaded NgModule.\n  // If a tree of states is lazy loaded, only add the injector to the root of the lazy loaded tree.\n  // The children will get the injector by resolve inheritance.\n  const newParentStates = newStateObjects.filter(state => !inArray(newStateObjects, state.parent));\n\n  // Add the Injector to the top of the lazy loaded state tree as a resolve\n  newParentStates.forEach(state => state.resolvables.push(Resolvable.fromData(NATIVE_INJECTOR_TOKEN, injector)));\n\n  return {};\n}\n\n/**\n * Returns the new dependency injection values from the Child Injector\n *\n * When a DI token is defined as multi: true, the child injector\n * can add new values for the token.\n *\n * This function returns the values added by the child injector,  and excludes all values from the parent injector.\n *\n * @internalapi\n */\nexport function multiProviderParentChildDelta(parent: Injector, child: Injector, token: any) {\n  const childVals: RootModule[] = child.get(token, []);\n  const parentVals: RootModule[] = parent.get(token, []);\n  return childVals.filter(val => parentVals.indexOf(val) === -1);\n}\n",
    "/** @module ng2 */\n/** */\nimport { LazyLoadResult, Transition, StateDeclaration } from '@uirouter/core'; // has or is using\nimport { BuilderFunction, StateObject } from '@uirouter/core';\nimport { loadNgModule } from '../lazyLoad/lazyLoadNgModule';\n\n/**\n * This is a [[StateBuilder.builder]] function for ngModule lazy loading in Angular.\n *\n * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\n * decorates the `lazyLoad` property for states that have a [[Ng2StateDeclaration.ngModule]] declaration.\n *\n * If the state has a [[Ng2StateDeclaration.ngModule]], it will create a `lazyLoad` function\n * that in turn calls `loadNgModule(loadNgModuleFn)`.\n *\n * #### Example:\n * A state that has a `ngModule`\n * ```js\n * var decl = {\n *   ngModule: () => System.import('./childModule.ts')\n * }\n * ```\n * would build a state with a `lazyLoad` function like:\n * ```js\n * import { loadNgModule } from \"@uirouter/angular\";\n * var decl = {\n *   lazyLoad: loadNgModule(() => System.import('./childModule.ts')\n * }\n * ```\n *\n * If the state has both a `ngModule:` *and* a `lazyLoad`, then the `lazyLoad` is run first.\n *\n * #### Example:\n * ```js\n * var decl = {\n *   lazyLoad: () => System.import('third-party-library'),\n *   ngModule: () => System.import('./childModule.ts')\n * }\n * ```\n * would build a state with a `lazyLoad` function like:\n * ```js\n * import { loadNgModule } from \"@uirouter/angular\";\n * var decl = {\n *   lazyLoad: () => System.import('third-party-library')\n *       .then(() => loadNgModule(() => System.import('./childModule.ts'))\n * }\n * ```\n *\n */\nexport function ng2LazyLoadBuilder(state: StateObject, parent: BuilderFunction) {\n  const loadNgModuleFn = state['loadChildren'];\n  return loadNgModuleFn ? loadNgModule(loadNgModuleFn) : state.lazyLoad;\n}\n",
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n",
    "/** @module ng2 */\n/** */\nimport { BaseLocationServices, parseUrl, UIRouter } from '@uirouter/core';\nimport { LocationStrategy } from '@angular/common';\n\n/** A `LocationServices` that delegates to the Angular LocationStrategy */\nexport class Ng2LocationServices extends BaseLocationServices {\n  constructor(router: UIRouter, private _locationStrategy: LocationStrategy, isBrowser: boolean) {\n    super(router, isBrowser);\n\n    this._locationStrategy.onPopState(evt => {\n      if (evt.type !== 'hashchange') {\n        this._listener(evt);\n      }\n    });\n  }\n\n  _get() {\n    return this._locationStrategy.path(true).replace(this._locationStrategy.getBaseHref().replace(/\\/$/, ''), '');\n  }\n\n  _set(state: any, title: string, url: string, replace: boolean): any {\n    const { path, search, hash } = parseUrl(url);\n    const urlWithHash = path + (hash ? '#' + hash : '');\n\n    if (replace) {\n      this._locationStrategy.replaceState(state, title, urlWithHash, search);\n    } else {\n      this._locationStrategy.pushState(state, title, urlWithHash, search);\n    }\n  }\n\n  dispose(router: UIRouter) {\n    super.dispose(router);\n  }\n}\n",
    "/** @module ng2 */\n/** */\n\nimport { UIRouter, is, BrowserLocationConfig } from '@uirouter/core';\nimport { LocationStrategy, PathLocationStrategy } from '@angular/common';\n\nexport class Ng2LocationConfig extends BrowserLocationConfig {\n  constructor(router: UIRouter, private _locationStrategy: LocationStrategy) {\n    super(router, is(PathLocationStrategy)(_locationStrategy));\n  }\n\n  baseHref(href?: string): string {\n    return this._locationStrategy.getBaseHref();\n  }\n}\n",
    "/**\n * # UI-Router for Angular (v2+)\n *\n * - [@uirouter/angular home page](https://ui-router.github.io/ng2)\n * - [tutorials](https://ui-router.github.io/tutorial/ng2/helloworld)\n * - [quick start repository](http://github.com/ui-router/quickstart-ng2)\n *\n * Getting started:\n *\n * - Use npm. Add a dependency on latest `@uirouter/angular`\n * - Import UI-Router classes directly from `\"@uirouter/angular\"`\n *\n * ```js\n * import {StateRegistry} from \"@uirouter/angular\";\n * ```\n *\n * - Create application states (as defined by [[Ng2StateDeclaration]]).\n *\n * ```js\n * export let state1: Ng2StateDeclaration = {\n *   name: 'state1',\n *   component: State1Component,\n *   url: '/one'\n * }\n *\n * export let state2: Ng2StateDeclaration = {\n *   name: 'state2',\n *   component: State2Component,\n *   url: '/two'\n * }\n * ```\n *\n * - Import a [[UIRouterModule.forChild]] module into your feature `NgModule`s.\n *\n * ```js\n * @ NgModule({\n *   imports: [\n *     SharedModule,\n *     UIRouterModule.forChild({ states: [state1, state2 ] })\n *   ],\n *   declarations: [\n *     State1Component,\n *     State2Component,\n *   ]\n * })\n * export class MyFeatureModule {}\n * ```\n *\n * - Import a [[UIRouterModule.forRoot]] module into your application root `NgModule`\n * - Either bootstrap a [[UIView]] component, or add a `<ui-view></ui-view>` viewport to your root component.\n *\n * ```js\n * @ NgModule({\n *   imports: [\n *     BrowserModule,\n *     UIRouterModule.forRoot({ states: [ homeState ] }),\n *     MyFeatureModule,\n *   ],\n *   declarations: [\n *     HomeComponent\n *   ]\n *   bootstrap: [ UIView ]\n * })\n * class RootAppModule {}\n *\n * browserPlatformDynamic.bootstrapModule(RootAppModule);\n * ```\n *\n * - Optionally specify a configuration class [[ChildModule.configClass]] for any module\n * to perform any router configuration during bootstrap or lazyload.\n * Pass the class to [[UIRouterModule.forRoot]] or [[UIRouterModule.forChild]].\n *\n * ```js\n * import {UIRouter} from \"@uirouter/angular\";\n *\n * @ Injectable()\n * export class MyUIRouterConfig {\n *   // Constructor is injectable\n *   constructor(uiRouter: UIRouter) {\n *     uiRouter.urlMatcherFactory.type('datetime', myDateTimeParamType);\n *   }\n * }\n * ```\n *\n * @preferred @module ng2\n */\n/** */\nimport { Injector, Provider, PLATFORM_ID, APP_INITIALIZER } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport {\n  UIRouter,\n  PathNode,\n  StateRegistry,\n  StateService,\n  TransitionService,\n  UrlMatcherFactory,\n  UrlRouter,\n  ViewService,\n  UrlService,\n  UIRouterGlobals,\n  services,\n  Resolvable,\n  NATIVE_INJECTOR_TOKEN,\n} from '@uirouter/core';\nimport { UIView, ParentUIViewInject } from './directives/uiView';\nimport { ng2ViewsBuilder, Ng2ViewConfig } from './statebuilders/views';\nimport { Ng2ViewDeclaration } from './interface';\nimport { applyRootModuleConfig, applyModuleConfig } from './uiRouterConfig';\nimport { RootModule, StatesModule, UIROUTER_ROOT_MODULE, UIROUTER_MODULE_TOKEN } from './uiRouterNgModule';\nimport { servicesPlugin, ServicesPlugin } from '@uirouter/core';\nimport { ng2LazyLoadBuilder } from './statebuilders/lazyLoad';\nimport { UIRouterRx } from '@uirouter/rx';\nimport { LocationStrategy } from '@angular/common';\nimport { Ng2LocationServices } from './location/locationService';\nimport { Ng2LocationConfig } from './location/locationConfig';\n\n/**\n * This is a factory function for a UIRouter instance\n *\n * Creates a UIRouter instance and configures it for Angular, then invokes router bootstrap.\n * This function is used as an Angular `useFactory` Provider.\n */\nexport function uiRouterFactory(\n  locationStrategy: LocationStrategy,\n  rootModules: RootModule[],\n  modules: StatesModule[],\n  injector: Injector\n) {\n  if (rootModules.length !== 1) {\n    throw new Error(\"Exactly one UIRouterModule.forRoot() should be in the bootstrapped app module's imports: []\");\n  }\n\n  // ----------------- Create router -----------------\n  // Create a new ng2 UIRouter and configure it for ng2\n  const router = new UIRouter();\n\n  // Add RxJS plugin\n  router.plugin(UIRouterRx);\n\n  // Add $q-like and $injector-like service APIs\n  router.plugin<ServicesPlugin>(servicesPlugin);\n\n  // ----------------- Monkey Patches ----------------\n  // Monkey patch the services.$injector to use the root ng2 Injector\n  services.$injector.get = injector.get.bind(injector);\n\n  // ----------------- Configure for ng2 -------------\n  router.locationService = new Ng2LocationServices(\n    router,\n    locationStrategy,\n    isPlatformBrowser(injector.get(PLATFORM_ID))\n  );\n  router.locationConfig = new Ng2LocationConfig(router, locationStrategy);\n\n  // Apply ng2 ui-view handling code\n  const viewConfigFactory = (path: PathNode[], config: Ng2ViewDeclaration) => new Ng2ViewConfig(path, config);\n  router.viewService._pluginapi._viewConfigFactory('ng2', viewConfigFactory);\n\n  // Apply statebuilder decorator for ng2 NgModule registration\n  const registry = router.stateRegistry;\n  registry.decorator('views', ng2ViewsBuilder);\n  registry.decorator('lazyLoad', ng2LazyLoadBuilder);\n\n  // Prep the tree of NgModule by placing the root NgModule's Injector on the root state.\n  const ng2InjectorResolvable = Resolvable.fromData(NATIVE_INJECTOR_TOKEN, injector);\n  registry.root().resolvables.push(ng2InjectorResolvable);\n\n  // Auto-flush the parameter type queue\n  router.urlMatcherFactory.$get();\n\n  // ----------------- Initialize router -------------\n  rootModules.forEach(moduleConfig => applyRootModuleConfig(router, injector, moduleConfig));\n  modules.forEach(moduleConfig => applyModuleConfig(router, injector, moduleConfig));\n\n  return router;\n}\n\n// Start monitoring the URL when the app starts\nexport function appInitializer(router: UIRouter) {\n  return () => {\n    if (!router.urlRouter.interceptDeferred) {\n      router.urlService.listen();\n      router.urlService.sync();\n    }\n  };\n}\n\nexport function parentUIViewInjectFactory(r: StateRegistry) {\n  return { fqn: null, context: r.root() } as ParentUIViewInject;\n}\n\nexport const _UIROUTER_INSTANCE_PROVIDERS: Provider[] = [\n  {\n    provide: UIRouter,\n    useFactory: uiRouterFactory,\n    deps: [LocationStrategy, UIROUTER_ROOT_MODULE, UIROUTER_MODULE_TOKEN, Injector],\n  },\n  { provide: UIView.PARENT_INJECT, useFactory: parentUIViewInjectFactory, deps: [StateRegistry] },\n  { provide: APP_INITIALIZER, useFactory: appInitializer, deps: [UIRouter], multi: true },\n];\n\nexport function fnStateService(r: UIRouter) {\n  return r.stateService;\n}\nexport function fnTransitionService(r: UIRouter) {\n  return r.transitionService;\n}\nexport function fnUrlMatcherFactory(r: UIRouter) {\n  return r.urlMatcherFactory;\n}\nexport function fnUrlRouter(r: UIRouter) {\n  return r.urlRouter;\n}\nexport function fnUrlService(r: UIRouter) {\n  return r.urlService;\n}\nexport function fnViewService(r: UIRouter) {\n  return r.viewService;\n}\nexport function fnStateRegistry(r: UIRouter) {\n  return r.stateRegistry;\n}\nexport function fnGlobals(r: any) {\n  return r.globals;\n}\n\nexport const _UIROUTER_SERVICE_PROVIDERS: Provider[] = [\n  { provide: StateService, useFactory: fnStateService, deps: [UIRouter] },\n  { provide: TransitionService, useFactory: fnTransitionService, deps: [UIRouter] },\n  { provide: UrlMatcherFactory, useFactory: fnUrlMatcherFactory, deps: [UIRouter] },\n  { provide: UrlRouter, useFactory: fnUrlRouter, deps: [UIRouter] },\n  { provide: UrlService, useFactory: fnUrlService, deps: [UIRouter] },\n  { provide: ViewService, useFactory: fnViewService, deps: [UIRouter] },\n  { provide: StateRegistry, useFactory: fnStateRegistry, deps: [UIRouter] },\n  { provide: UIRouterGlobals, useFactory: fnGlobals, deps: [UIRouter] },\n];\n\n/**\n * The UI-Router providers, for use in your application bootstrap\n *\n * @deprecated use [[UIRouterModule.forRoot]]\n */\nexport const UIROUTER_PROVIDERS: Provider[] = _UIROUTER_INSTANCE_PROVIDERS.concat(_UIROUTER_SERVICE_PROVIDERS);\n"
  ],
  "names": [
    "state",
    "views",
    "viewsObject",
    "$default",
    "pick",
    "forEach",
    "config",
    "name",
    "isFunction",
    "component",
    "Object",
    "keys",
    "length",
    "$type",
    "$context",
    "$name",
    "normalized",
    "ViewService",
    "normalizeUIViewTarget",
    "$uiViewName",
    "uiViewName",
    "$uiViewContextAnchor",
    "uiViewContextAnchor",
    "id",
    "Ng2ViewConfig",
    "path",
    "viewDecl",
    "this",
    "services",
    "$q",
    "when",
    "_i",
    "injectors",
    "Error",
    "MergeInjector",
    "token",
    "notFoundValue",
    "i",
    "val",
    "get",
    "NOT_FOUND",
    "arguments",
    "ng2ComponentInputs",
    "factory",
    "inputs",
    "map",
    "input",
    "prop",
    "propName",
    "templateName",
    "router",
    "parent",
    "viewContainerRef",
    "_parent",
    "UIView",
    "parse",
    "parentFqn",
    "fqn",
    "_uiViewData",
    "creationContext",
    "context",
    "configUpdated",
    "_viewConfigUpdated",
    "bind",
    "undefined",
    "_deregisterUiCanExitHook",
    "transitionService",
    "onBefore",
    "trans",
    "_this",
    "_invokeUiCanExitHook",
    "_deregisterUiOnParamsChangedHook",
    "onSuccess",
    "_invokeUiOnParamsChangedHook",
    "_deregisterUIView",
    "viewService",
    "registerUIView",
    "instance",
    "_componentRef",
    "uiCanExitFn",
    "uiCanExit",
    "exiting",
    "indexOf",
    "onStart",
    "call",
    "$transition$",
    "uiOnParamsChanged",
    "viewState",
    "ResolveContext",
    "getResolvable",
    "data",
    "toParams_1",
    "params",
    "fromParams_1",
    "getNodeSchema",
    "node",
    "paramSchema",
    "toSchema",
    "treeChanges",
    "reduce",
    "unnestR",
    "fromSchema_1",
    "changedToParams",
    "filter",
    "param",
    "idx",
    "type",
    "equals",
    "changedKeys_1",
    "x",
    "newValues",
    "key",
    "destroy",
    "_disposeLast",
    "trace",
    "traceUIViewConfigUpdated",
    "_applyUpdatedConfig",
    "changeDetectorRef",
    "markForCheck",
    "componentInjector",
    "_getComponentInjector",
    "componentClass",
    "compFactory",
    "ComponentFactoryResolver",
    "resolveComponentFactory",
    "_componentTarget",
    "createComponent",
    "_applyInputBindings",
    "newProviders",
    "getTokens",
    "r",
    "resolved",
    "provide",
    "useValue",
    "injector",
    "parentInject",
    "push",
    "PARENT_INJECT",
    "parentComponentInjector",
    "moduleInjector",
    "NATIVE_INJECTOR_TOKEN",
    "mergedParentInjector",
    "ReflectiveInjector",
    "resolveAndCreate",
    "bindings",
    "explicitBoundProps",
    "explicitInputTuples",
    "acc",
    "concat",
    "find",
    "implicitInputTuples",
    "tuple",
    "inArray",
    "resolvable",
    "Component",
    "selector",
    "exportAs",
    "template",
    "UIRouter",
    "Inject",
    "ViewContainerRef",
    "ViewChild",
    "read",
    "Input",
    "uiRouter",
    "module",
    "states",
    "stateRegistry",
    "register",
    "isDefined",
    "deferIntercept",
    "urlService",
    "otherwise",
    "rules",
    "initial",
    "_el",
    "_renderer",
    "AnchorUISref",
    "nativeElement",
    "target",
    "href",
    "setProperty",
    "removeAttribute",
    "Directive",
    "ElementRef",
    "Renderer2",
    "_router",
    "_anchorUISref",
    "ReplaySubject",
    "_statesSub",
    "globals",
    "states$",
    "subscribe",
    "update",
    "UISref",
    "options",
    "_emit",
    "changes",
    "unsubscribe",
    "targetState$",
    "$state",
    "stateService",
    "newTarget",
    "getOptions",
    "next",
    "defaultOpts",
    "relative",
    "inherit",
    "source",
    "extend",
    "button",
    "ctrlKey",
    "metaKey",
    "openInNewTab",
    "isNumber",
    "go",
    "Optional",
    "HostListener",
    "inactiveStatus",
    "active",
    "exact",
    "entering",
    "targetStates",
    "basePath",
    "appendPath",
    "PathUtils",
    "subPath",
    "n",
    "event",
    "srefTarget",
    "pathMatchesTarget",
    "exists",
    "targetParamVals",
    "buildPath",
    "hasOwnProperty",
    "tailNode",
    "tail",
    "paramValues",
    "Param",
    "pathMatches",
    "tc",
    "isStartEvent",
    "evt",
    "activePath",
    "to",
    "from",
    "spreadToSubPaths",
    "anyTrueR",
    "retained",
    "left",
    "right",
    "_globals",
    "EventEmitter",
    "status",
    "assign",
    "UISrefStatus",
    "transEvents$",
    "start$",
    "pipe",
    "switchMap",
    "transStart$",
    "of",
    "transResult",
    "promise",
    "then",
    "transFinish$",
    "_srefs$",
    "BehaviorSubject",
    "_srefs",
    "toArray",
    "_srefChangesSub",
    "srefs",
    "targetStates$",
    "combineLatest",
    "sref",
    "_subscription",
    "targets",
    "getSrefStatus",
    "mergeSrefStatus",
    "_setStatus",
    "uiSrefStatus",
    "emit",
    "UIRouterGlobals",
    "Output",
    "ContentChildren",
    "descendants",
    "rnd",
    "host",
    "_classes",
    "cls",
    "addClass",
    "removeClass",
    "_classesEq",
    "UISrefActive",
    "split",
    "Host",
    "_UIROUTER_DIRECTIVES",
    "UIROUTER_DIRECTIVES",
    "UIROUTER_ROOT_MODULE",
    "InjectionToken",
    "UIROUTER_MODULE_TOKEN",
    "UIROUTER_STATES",
    "root",
    "mod",
    "deferInitialRender",
    "Promise",
    "resolve",
    "invokeLimit",
    "multi",
    "ROUTES",
    "ANALYZE_FOR_ENTRY_COMPONENTS",
    "APP_INITIALIZER",
    "useFactory",
    "onTransitionReady",
    "deps",
    "TransitionService",
    "useHash",
    "LocationStrategy",
    "useClass",
    "HashLocationStrategy",
    "PathLocationStrategy",
    "UIRouterModule",
    "ngModule",
    "providers",
    "_UIROUTER_INSTANCE_PROVIDERS",
    "_UIROUTER_SERVICE_PROVIDERS",
    "locationStrategy",
    "makeRootProviders",
    "makeChildProviders",
    "NgModule",
    "imports",
    "CommonModule",
    "declarations",
    "exports",
    "entryComponents",
    "moduleToLoad",
    "transition",
    "stateObject",
    "ng2Injector",
    "loadModuleFactory",
    "create",
    "moduleRef",
    "applyNgModule",
    "isString",
    "NgModuleFactoryLoader",
    "load",
    "compiler",
    "Compiler",
    "offlineMode",
    "loadChildrenPromise",
    "__esModule",
    "moduleType",
    "compileModuleAsync",
    "ng2Module",
    "parentInjector",
    "lazyLoadState",
    "registry",
    "originalName",
    "originalState",
    "isFuture",
    "exec",
    "replacementName",
    "newRootModules",
    "multiProviderParentChildDelta",
    "uniqR",
    "newChildModules",
    "console",
    "log",
    "newStateObjects",
    "applyModuleConfig",
    "replacementState",
    "resolvables",
    "Resolvable",
    "fromData",
    "child",
    "childVals",
    "parentVals",
    "loadNgModuleFn",
    "loadNgModule",
    "lazyLoad",
    "extendStatics",
    "d",
    "b",
    "setPrototypeOf",
    "__proto__",
    "Array",
    "p",
    "__extends",
    "__",
    "constructor",
    "prototype",
    "Ng2LocationServices",
    "_locationStrategy",
    "isBrowser",
    "_super",
    "onPopState",
    "_listener",
    "tslib_1.__extends",
    "replace",
    "getBaseHref",
    "title",
    "url",
    "search",
    "hash",
    "urlWithHash",
    "replaceState",
    "pushState",
    "dispose",
    "BaseLocationServices",
    "Ng2LocationConfig",
    "is",
    "BrowserLocationConfig",
    "rootModules",
    "modules",
    "plugin",
    "UIRouterRx",
    "servicesPlugin",
    "$injector",
    "locationService",
    "isPlatformBrowser",
    "PLATFORM_ID",
    "locationConfig",
    "_pluginapi",
    "_viewConfigFactory",
    "decorator",
    "ng2ViewsBuilder",
    "ng2LazyLoadBuilder",
    "ng2InjectorResolvable",
    "urlMatcherFactory",
    "$get",
    "moduleConfig",
    "applyRootModuleConfig",
    "urlRouter",
    "interceptDeferred",
    "listen",
    "sync",
    "uiRouterFactory",
    "Injector",
    "parentUIViewInjectFactory",
    "StateRegistry",
    "appInitializer",
    "StateService",
    "fnStateService",
    "fnTransitionService",
    "UrlMatcherFactory",
    "fnUrlMatcherFactory",
    "UrlRouter",
    "fnUrlRouter",
    "UrlService",
    "fnUrlService",
    "fnViewService",
    "fnStateRegistry",
    "fnGlobals",
    "UIROUTER_PROVIDERS"
  ],
  "mappings": "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"
}